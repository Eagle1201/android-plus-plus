////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using Microsoft.VisualStudio.Shell;
using Microsoft.Win32;

using AndroidPlusPlus.Common;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsIntegratedPackage
{
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  [ComVisible (false)]

  [AttributeUsage (AttributeTargets.Class, Inherited = true, AllowMultiple = true)]

  public sealed class ProvideExternObjectAttribute : RegistrationAttribute
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private Type m_objectType;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public Type ObjectType { get { return m_objectType; } }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public ProvideExternObjectAttribute (Type objectType)
      : base ()
    {
      m_objectType = objectType;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string CLSIDKey
    {
      get 
      { 
        return string.Format (CultureInfo.InvariantCulture, @"CLSID\{0}", m_objectType.GUID.ToString ("B")); 
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public override void Register (RegistrationAttribute.RegistrationContext context)
    {
      using (RegistrationAttribute.Key regKey = context.CreateKey (CLSIDKey))
      {
        RegisterWithKey (regKey, regKey.GetType (), context.InprocServerPath, context.CodeBase);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Register (RegistryKey rootKey)
    {
      try
      {
        using (RegistryKey regKey = rootKey.CreateSubKey (CLSIDKey, RegistryKeyPermissionCheck.ReadWriteSubTree))
        {
          string packagePath = Path.GetDirectoryName (Assembly.GetExecutingAssembly ().Location);

          RegisterWithKey (regKey, regKey.GetType (), Environment.SystemDirectory + @"\MSCOREE.DLL", packagePath); // This may to reference the 64bit equivilent, in Windows\SysWow64\ at some point.
        }
      }
      catch (UnauthorizedAccessException e)
      {
        LoggingUtils.HandleException (e);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private void RegisterWithKey (object regKey, Type regKeyType, string inprocServerPath, string codeBasePath)
    {
      // 
      // Unified registration functionality for accepting both RegistrationAttribute.Key and RegistryKey objects.
      // 

      try
      {
        MethodInfo 
          regKeySetValue = regKeyType.GetMethod ("SetValue", new [] { typeof (string), typeof (object) }),
          regKeyClose = regKeyType.GetMethod ("Close");

        if (regKeySetValue == null)
        {
          throw new InvalidOperationException ();
        }

        if (regKeyClose == null)
        {
          throw new InvalidOperationException ();
        }

        regKeySetValue.Invoke (regKey, new object [] { string.Empty, m_objectType.AssemblyQualifiedName });

        regKeySetValue.Invoke (regKey, new object [] { "InprocServer32", inprocServerPath }); // This may to reference the 64bit equivilent, in Windows\SysWow64\ at some point.

        regKeySetValue.Invoke (regKey, new object [] { "Class", m_objectType.FullName });

        regKeySetValue.Invoke (regKey, new object [] { "CodeBase", Path.GetDirectoryName (codeBasePath) + "\\" + Path.GetFileName (m_objectType.Assembly.CodeBase) });

        regKeySetValue.Invoke (regKey, new object [] { "ThreadingModel", "Both" });// Is this important?

        regKeySetValue.Invoke (regKey, new object [] { "Assembly", m_objectType.Assembly });

        regKeyClose.Invoke (regKey, null);
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public override void Unregister (RegistrationAttribute.RegistrationContext context)
    {
      context.RemoveKey (CLSIDKey);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Unregister (RegistryKey rootKey)
    {
      rootKey.DeleteSubKeyTree (CLSIDKey);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
