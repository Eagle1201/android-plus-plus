////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Reflection;
using System.Runtime.InteropServices;
using System.ComponentModel.Design;
using System.IO;
using System.Linq;
using System.Security;

using EnvDTE;
using Microsoft.Win32;
using Microsoft.VisualStudio;
using Microsoft.VisualStudio.Shell;
using Microsoft.VisualStudio.Shell.Interop;
using Microsoft.VisualStudio.OLE.Interop;

using AndroidPlusPlus.Common;
using AndroidPlusPlus.VsDebugEngine;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsIntegratedPackage
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  [ComVisible(true)]

  [Guid(Guids.guidAndroidPlusPlusPackageStringCLSID)]

  // 
  // Package registration
  // - Ensure the VSXI plugin is initialised on startup, not adhoc (on first use).
  // - Register the informations needed to show the this package in the Help/About dialog of Visual Studio.
  // 

  [ProvideObject(typeof(VsIntegratedPackage.Package))]

  [PackageRegistration(UseManagedResourcesOnly = true)]

  [ProvideAutoLoad(VSConstants.UICONTEXT.NoSolution_string)]

  [ProvideProjectFactory (typeof (VsIntegratedPackage.ProjectFactory), null, "#114", "", "", ".\\NullPath", LanguageVsTemplate = "Android++")]

  [InstalledProductRegistration("#110", "#112", "1.0", IconResourceID = 400)]

  // 
  // 'Debug Engine' registration.
  // 

  [ProvideExternObject(typeof(VsDebugEngine.DebugEngine))]

  [ProvideExternObject(typeof(VsDebugEngine.DebugPortSupplier))]

  [ProvideExternObject(typeof(VsDebugEngine.DebugProgramProvider))]

  [DebugPortSupplierRegistration(VsDebugEngine.DebugEngineGuids.guidDebugPortSupplierStringID, "Android++", typeof(VsDebugEngine.DebugPortSupplier))]

  [DebugEngineRegistration(VsDebugEngine.DebugEngineGuids.guidDebugEngineStringID, "Android++", typeof(VsDebugEngine.DebugEngine),
    IncompatibleList = new string [] 
    { 
      VsDebugEngine.DebugEngineGuids.guidIncompatibleDebugEngineSilverlightStringID,
      VsDebugEngine.DebugEngineGuids.guidIncompatibleDebugEngineTSql2000StringID,
      VsDebugEngine.DebugEngineGuids.guidIncompatibleDebugEngineTSql2005StringID,
      VsDebugEngine.DebugEngineGuids.guidIncompatibleDebugEngineNativeStringID,
      VsDebugEngine.DebugEngineGuids.guidIncompatibleDebugEngineManagedStringID,
      VsDebugEngine.DebugEngineGuids.guidIncompatibleDebugEngineManaged20StringID,
      VsDebugEngine.DebugEngineGuids.guidIncompatibleDebugEngineManaged40StringID,
      VsDebugEngine.DebugEngineGuids.guidIncompatibleDebugEngineWorkflowStringID,
      VsDebugEngine.DebugEngineGuids.guidIncompatibleDebugEngineManagedAndNativeStringID,
      VsDebugEngine.DebugEngineGuids.guidIncompatibleDebugEngineScriptStringID,
    },
    PortSupplier = new string []
    {
      VsDebugEngine.DebugEngineGuids.guidDebugPortSupplierStringID,
      "708C1ECA-FF48-11D2-904F-00C04FA302A1"
    },
    //ProgramProvider = typeof(AndroidMT.VsDebugEngine.DebugProgramProvider),
    Attach = true,
    Disassembly = true, 
    RemoteDebugging = true, 
    AlwaysLoadLocal = true, 
    AutoSelectPriority = 4, 
    AddressBP = true, 
    Exceptions = true,
    DataBP = true)]

  // 
  // This attribute is needed to let the shell know that this package exposes some menus.
  // 

  [ProvideMenuResource ("Menus.ctmenu", 1)]

  [ProvideToolWindow (typeof (GdbConsoleWindow), 
    Style = VsDockStyle.Tabbed, 
    Window = "{A8792F75-01C3-4AB4-BB10-CFBCF0615A9C}", 
    Orientation = ToolWindowOrientation.Right)]

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public sealed class Package : Microsoft.VisualStudio.Shell.Package, IVsInstalledProduct
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private AssemblyResolveListener m_assemblyResolveListener;

    private PropertyEventListener m_propertyEventListener;

    private DebuggerEventListener m_debuggerEventListener;

    private SolutionEventListener m_solutionEventListener;

    private InterfaceEventListener m_interfaceEventListener;

    private TextWriterTraceListener m_traceWriterListener;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public Package ()
    {
      Trace.WriteLine (string.Format(CultureInfo.CurrentCulture, "Entering constructor for: {0}", this.ToString ()));
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region Package Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override void Initialize () 
    {
      LoggingUtils.PrintFunction ();

      base.Initialize ();

      InitialiseTraceListeners ();

      InitialiseInterfaceListeners ();

      InitialiseEventListeners ();

      // 
      // Sanity type checking.
      // 
#if false
      try
      {
        /*if (typeof (AndroidPlusPlus.VsIntegratedPackage.Package) != System.Type.GetTypeFromCLSID (Guids.guidAndroidPlusPlusPackageCLSID))
        {
          throw new COMException ("AndroidPlusPlus.VsIntegratedPackage.Package not registered with COM");
        }*/

        /*if (typeof (AndroidPlusPlus.VsDebugEngine.DebugEngine) != System.Type.GetTypeFromCLSID (DebugEngineGuids.guidDebugEngineCLSID))
        {
          throw new COMException ("AndroidPlusPlus.VsDebugEngine.DebugEngine not registered with COM");
        }*/
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        VsShellUtilities.ShowMessageBox (this, e.Message, "Android++ Debugger", OLEMSGICON.OLEMSGICON_CRITICAL, OLEMSGBUTTON.OLEMSGBUTTON_OK, OLEMSGDEFBUTTON.OLEMSGDEFBUTTON_FIRST);
      }

      /*try
      {
        // 
        // Evaluate the current target HKLM registry location for this version of VisualStudio.
        // 

        RegistryKey visualStudioPlatformRoot = Registry.LocalMachine.OpenSubKey (@"SOFTWARE\Wow6432Node\Microsoft\VisualStudio\10.0");

        if (visualStudioPlatformRoot == null)
        {
          // Running on a native 32-bit OS.

          visualStudioPlatformRoot = Registry.LocalMachine.OpenSubKey (@"SOFTWARE\Microsoft\VisualStudio\10.0");
        }

        // 
        // Traverse custom RegisterAttributes explictly registering their data within HKLM due to limitiations with DE architecture.
        // 

        IEnumerable<ProvideExternObjectAttribute> provideExternObjectAttributes = typeof (AndroidMTPackage).GetCustomAttributes (typeof (ProvideExternObjectAttribute), false).Cast<ProvideExternObjectAttribute> ();

        IEnumerable<DebugPortSupplierRegistrationAttribute> debugPortSupplierRegistrationAttributes = typeof (AndroidMTPackage).GetCustomAttributes (typeof (DebugPortSupplierRegistrationAttribute), false).Cast<DebugPortSupplierRegistrationAttribute> ();

        IEnumerable<DebugEngineRegistrationAttribute> debugEngineRegistrationAttributes = typeof (AndroidMTPackage).GetCustomAttributes (typeof (DebugEngineRegistrationAttribute), false).Cast<DebugEngineRegistrationAttribute> ();

        foreach (ProvideExternObjectAttribute attribute in provideExternObjectAttributes)
        {
          attribute.Register (visualStudioPlatformRoot);
        }

        foreach (DebugPortSupplierRegistrationAttribute attribute in debugPortSupplierRegistrationAttributes)
        {
          attribute.Register (visualStudioPlatformRoot);
        }

        foreach (DebugEngineRegistrationAttribute attribute in debugEngineRegistrationAttributes)
        {
          attribute.Register (visualStudioPlatformRoot);
        }
      }
      catch (Exception e)
      {
        Trace.WriteLine ("Failed to added AndroidMT to HKLM AD7Metrics.");
      }*/
#endif
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override void Dispose (bool disposing)
    {
      LoggingUtils.PrintFunction ();

      DisposeTraceListeners ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void InitialiseInterfaceListeners ()
    {
      LoggingUtils.PrintFunction ();

      OleMenuCommandService menuCommandService = GetService (typeof (IMenuCommandService)) as OleMenuCommandService;

      m_interfaceEventListener = new InterfaceEventListener (this);

      m_interfaceEventListener.RegisterCallbacks (menuCommandService);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void InitialiseTraceListeners ()
    {
      LoggingUtils.PrintFunction ();

      string traceLog = Path.ChangeExtension (Assembly.GetExecutingAssembly ().Location, ".log");

      Trace.WriteLine ("[Package] Trace Log: " + traceLog);

      m_traceWriterListener = new TextWriterTraceListener (traceLog);

      Trace.Listeners.Add (m_traceWriterListener);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void DisposeTraceListeners ()
    {
      LoggingUtils.PrintFunction ();

      Trace.Flush ();

      Trace.Listeners.Remove (m_traceWriterListener);

      m_traceWriterListener.Close ();

      m_traceWriterListener.Dispose ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void InitialiseEventListeners ()
    {
      // 
      // Aquire VisualStudio service references.
      // 

      LoggingUtils.PrintFunction ();

      DTE dteService = GetService (typeof (SDTE)) as DTE;

      IVsShell shellService = GetService (typeof (SVsShell)) as IVsShell;

      IVsDebugger debuggerService = GetService (typeof (IVsDebugger)) as IVsDebugger;

      IVsSolution2 solutionService = GetService (typeof (SVsSolution)) as IVsSolution2;

      IVsMonitorSelection monitorSelectionService = GetService (typeof (IVsMonitorSelection)) as IVsMonitorSelection;

      // 
      // Register service listeners.
      // 

      Trace.Assert (dteService != null);

      Trace.Assert (shellService != null);

      Trace.Assert (debuggerService != null);

      Trace.Assert (solutionService != null);

      Trace.Assert (monitorSelectionService != null);

      m_propertyEventListener = new PropertyEventListener (shellService);

      m_debuggerEventListener = new DebuggerEventListener (dteService, debuggerService);

      m_solutionEventListener = new SolutionEventListener (dteService, solutionService);

      // 
      // Register a new listener to assist finding assemblies placed within the package's current directory.
      // 

      m_assemblyResolveListener = new AssemblyResolveListener ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IVsInstalledProduct Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [Obsolete("Visual Studio 2005+ no longer calls this method.")]
    int IVsInstalledProduct.IdBmpSplash (out uint pIdBmp) 
    {
      pIdBmp = 400;

      return VSConstants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    int IVsInstalledProduct.OfficialName(out string pbstrName)
    {
      pbstrName = "Android++";

      return VSConstants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    int IVsInstalledProduct.ProductID (out string pbstrPID)
    {
      pbstrPID = Assembly.GetExecutingAssembly ().GetName ().Version.ToString ();

      return VSConstants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    int IVsInstalledProduct.ProductDetails (out string pbstrProductDetails)
    {
      pbstrProductDetails = "Native development and debugging extension for Visual Studio.";

      return VSConstants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    int IVsInstalledProduct.IdIcoLogoForAboutbox (out uint pIdIco)
    {
      pIdIco = 400;

      return VSConstants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void OnStartupComplete ()
    {
      LoggingUtils.PrintFunction ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void OnBeginShutdown ()
    {
      LoggingUtils.PrintFunction ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void OnModeChanged (vsIDEMode lastMode)
    {
      LoggingUtils.PrintFunction ();

      switch (lastMode)
      {
        case vsIDEMode.vsIDEModeDesign:
        case vsIDEMode.vsIDEModeDebug:
        {
          break;
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
