////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;
using System.IO;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Runtime.CompilerServices;
using System.Xml;

using EnvDTE;
using Microsoft.VisualStudio.Shell;
using Microsoft.VisualStudio.Shell.Interop;
using Microsoft.VisualStudio.VCProjectEngine;
using Microsoft.VisualStudio.Project.Contracts.VS2010ONLY;
using Microsoft.VisualStudio.Project.Framework;
using Microsoft.VisualStudio.Project.Utilities.DebuggerProviders;

using AndroidPlusPlus.Common;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsDebugLauncher
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  [DebuggerScope("AndroidPlusPlusDebugger")]

  [ProjectScope(ProjectScopeRequired.ConfiguredProject)]

  [Export(typeof(IDebugLaunchProvider))]

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class DebugLauncherX : IDebugLaunchProvider
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // 
    // Gets the set of debuggers already in the Visual C++ project system.
    // This allows us to find the debugger that we intend to wrap.
    // 

    [ImportMany]
    public List<Lazy<IDebugLaunchProvider, IDictionary<string, object>>> DebugProviders { get; set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // 
    // Gets the service provider used by the top-level Visual C++ project engine.
    // 

    [Import]
    public IServiceProvider ServiceProvider { get; set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private static IDebugLauncher s_debugLauncher;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static IDebugLauncher GetDebugLauncher (IServiceProvider serviceProvider)
    {
      if (s_debugLauncher == null)
      {
        s_debugLauncher = new DebugLauncher (serviceProvider);
      }

      return s_debugLauncher;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public bool CanLaunch (DebugLaunchOptions launchOptions, IDictionary <string, string> projectProperties)
    {
      LoggingUtils.PrintFunction ();

      try
      {
        IDebugLauncher debugLauncher = GetDebugLauncher (ServiceProvider);

        return debugLauncher.CanLaunch ((int) launchOptions);
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        VsShellUtilities.ShowMessageBox (ServiceProvider, string.Format ("Failed to launch. Reason:\n\n[Exception] {0}\n", e.Message, e.StackTrace), "Android++ Debugger", OLEMSGICON.OLEMSGICON_CRITICAL, OLEMSGBUTTON.OLEMSGBUTTON_OK, OLEMSGDEFBUTTON.OLEMSGDEFBUTTON_FIRST);
      }

      return false;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public IEnumerable<IDebugLaunchSettings> PrepareLaunch (DebugLaunchOptions launchOptions, IDictionary<string, string> projectProperties)
    {
      LoggingUtils.PrintFunction ();

      try
      {
        IDebugLauncher debugLauncher = GetDebugLauncher (ServiceProvider);

        debugLauncher.PrepareLaunch ();

        DebugLaunchSettings debugLaunchSettings = new DebugLaunchSettings (launchOptions);

        Project startupProject = GetStartupSolutionProject (ServiceProvider, (Dictionary <string, string>) projectProperties);

        if (startupProject == null)
        {
          throw new InvalidOperationException ("Could not find solution startup project.");
        }

        LoggingUtils.Print ("Launcher startup project: " + startupProject.Name + " (" + startupProject.FullName + ")");

        LaunchConfiguration launchConfig = debugLauncher.GetLaunchConfigurationFromProjectProperties (projectProperties, startupProject);

        if (launchOptions.HasFlag (DebugLaunchOptions.NoDebug))
        {
          debugLaunchSettings = (DebugLaunchSettings) debugLauncher.StartWithoutDebugging ((int) launchOptions, launchConfig, projectProperties);
        }
        else
        {
          debugLaunchSettings = (DebugLaunchSettings) debugLauncher.StartWithDebugging ((int) launchOptions, launchConfig, projectProperties);
        }

        return new IDebugLaunchSettings [] { debugLaunchSettings };
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        VsShellUtilities.ShowMessageBox (ServiceProvider, string.Format ("Failed to launch. Reason:\n\n[Exception] {0}\n", e.Message, e.StackTrace), "Android++ Debugger", OLEMSGICON.OLEMSGICON_CRITICAL, OLEMSGBUTTON.OLEMSGBUTTON_OK, OLEMSGDEFBUTTON.OLEMSGDEFBUTTON_FIRST);
      }

      return null;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private static Project GetStartupSolutionProject (IServiceProvider serviceProvider, IDictionary<string, string> projectProperties)
    {
      LoggingUtils.PrintFunction ();

      DTE dteService = serviceProvider.GetService (typeof (SDTE)) as DTE;

      Solution solution = dteService.Solution;

      SolutionBuild solutionBuild = solution.SolutionBuild;

      object [] startupProjects = (object []) solutionBuild.StartupProjects;

      Project startupProject = null;

      string startupProjectName = string.Empty;

      if (projectProperties.TryGetValue ("ProjectName", out startupProjectName))
      {
        // 
        // Construct a listing of all the sub-projects in this solution.
        // 

        List<Project> solutionProjects = new List<Project> ();

        foreach (Project project in solution.Projects)
        {
          solutionProjects.Add (project);

          GetProjectSubprojects (project, ref solutionProjects);
        }

        foreach (Project project in solutionProjects)
        {
          if (project.Name.Equals (startupProjectName))
          {
            startupProject = project;

            break;
          }
        }
      }
      else if (startupProjects.Length > 0)
      {
        startupProject = startupProjects [0] as Project;

        startupProjectName = startupProject.Name;
      }

      return startupProject;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private static void GetProjectSubprojects (Project project, ref List<Project> projectListing)
    {
      foreach (ProjectItem item in project.ProjectItems)
      {
        if (item.SubProject != null)
        {
          projectListing.Add (item.SubProject);

          GetProjectSubprojects (item.SubProject, ref projectListing);
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
