////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Threading;

using Microsoft.Build.Framework;
using Microsoft.Win32;
using Microsoft.Build.Utilities;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.MsBuild
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public static class TrackerUtilities
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static Dictionary<string, List <string>> GetDependencyTableFromTLog (ITaskItem tLogItem)
    {
      // 
      // Parse and collate a TLog. It's best to achieve this by associating dependancy graph 'entries' with associated sources.
      // 
      // Format:
      // 
      //    ^FILE1.C
      //    FILE1.OBJ
      //    ^FILE2.C|FILE3.C
      //    FILE2.OBJ
      //    FILE3.OBJ
      // 

      if (tLogItem == null)
      {
        throw new ArgumentNullException ();
      }

      Dictionary<string, List<string>> trackedDependencyTable = new Dictionary<string, List<string>> ();

      using (StreamReader reader = new StreamReader (tLogItem.GetMetadata ("FullPath"), Encoding.Unicode))
      {
        if (reader != null)
        {
          string trackedSourceLineData = reader.ReadLine ();

          while (!string.IsNullOrWhiteSpace (trackedSourceLineData))
          {
            if (trackedSourceLineData.StartsWith ("^"))
            {
              List<string> trackedSources = new List<string> (trackedSourceLineData.Substring (1).Split ('|'));

              string trackedDependencyEntriesLineData = reader.ReadLine ();

              while (!string.IsNullOrWhiteSpace (trackedDependencyEntriesLineData))
              {
                List<string> dependentSources;

                if (trackedDependencyTable.TryGetValue (trackedDependencyEntriesLineData, out dependentSources))
                {
                  foreach (string source in trackedSources)
                  {
                    if (!dependentSources.Contains (source))
                    {
                      dependentSources.Add (source);
                    }
                  }
                }
                else
                {
                  trackedDependencyTable.Add (trackedDependencyEntriesLineData, new List<string> (trackedSources));
                }

                trackedDependencyEntriesLineData = reader.ReadLine ();
              }
            }

            trackedSourceLineData = reader.ReadLine ();
          }

          reader.Close ();
        }
      }

      return trackedDependencyTable;
    }


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
