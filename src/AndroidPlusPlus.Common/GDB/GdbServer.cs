////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.Common
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public sealed class GdbServer : AsyncRedirectProcess.EventListener, IDisposable
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private readonly GdbSetup m_gdbSetup;

    private AsyncRedirectProcess m_gdbServerInstance;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public GdbServer (GdbSetup gdbSetup)
    {
      m_gdbSetup = gdbSetup;

      m_gdbServerInstance = null;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Dispose ()
    {
      if (m_gdbServerInstance != null)
      {
        m_gdbServerInstance.Dispose ();

        m_gdbServerInstance = null;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public bool Start ()
    {
      Trace.WriteLine (string.Format ("[GdbServer] Start:"));

      AndroidAdb.Refresh ();

      if (CheckGdbServerTarget ())
      {
        KillActiveGdbServerSessions ();

        // 
        // Launch 'gdbserver' now.
        // 

        m_gdbServerInstance = AndroidAdb.AdbCommandAsync (m_gdbSetup.Process.HostDevice, "shell", string.Format ("run-as {0} lib/gdbserver --attach {1}:{2} {3} ", m_gdbSetup.Process.Name, m_gdbSetup.Host, m_gdbSetup.Port, m_gdbSetup.Process.Pid));

        m_gdbServerInstance.Listener = this;

        m_gdbServerInstance.Start ();

        Trace.WriteLine (string.Format ("[GdbServer] Launched gdbserver succesfully."));

        return true;
      }

      return false;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public bool Stop ()
    {
      Trace.WriteLine (string.Format ("[GdbServer] Stop:"));

      bool stopped = false;

      if (m_gdbServerInstance != null)
      {
        m_gdbServerInstance.Kill ();

        m_gdbServerInstance = null;

        stopped = true;
      }

      AndroidAdb.Refresh ();

      KillActiveGdbServerSessions ();

      return stopped;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private bool CheckGdbServerTarget ()
    {
      Trace.WriteLine (string.Format ("[GdbServer] CheckGdbServerTarget:"));

      if (AndroidAdb.IsDeviceConnected (m_gdbSetup.Process.HostDevice))
      {
        // 
        // Check the target 'gdbserver' exits.
        // 

        using (SyncRedirectProcess checkGdbServer = AndroidAdb.AdbCommand (m_gdbSetup.Process.HostDevice, "shell", string.Format ("ls {0}/lib/gdbserver", m_gdbSetup.Process.InternalCacheDirectory)))
        {
          checkGdbServer.StartAndWaitForExit (1000);

          if (checkGdbServer.StandardOutput.ToLower ().Contains ("no such file"))
          {
            return false;
          }
        }

        return true;
      }

      return false;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private void KillActiveGdbServerSessions ()
    {
      Trace.WriteLine (string.Format ("[GdbServer] KillActiveGdbServerSessions:"));

      if (AndroidAdb.IsDeviceConnected (m_gdbSetup.Process.HostDevice))
      {
        AndroidProcess [] activeProcesses = m_gdbSetup.Process.HostDevice.GetProcesses ();

        foreach (AndroidProcess process in activeProcesses)
        {
          if (process.Name.Contains ("gdbserver"))
          {
            Trace.WriteLine (string.Format ("[GdbServer] Killing existing debugging session."));

            m_gdbSetup.Process.HostDevice.Shell ("kill", string.Format ("run-as {0} -9 {1}", process.Name, process.Pid));
          }
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void ProcessStdout (object sendingProcess, DataReceivedEventArgs args)
    {
      if (!string.IsNullOrEmpty (args.Data))
      {
        Trace.WriteLine (string.Format ("[GdbServer] ProcessStdout: {0}", args.Data));
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void ProcessStderr (object sendingProcess, DataReceivedEventArgs args)
    {
      if (!string.IsNullOrEmpty (args.Data))
      {
        Trace.WriteLine (string.Format ("[GdbServer] ProcessStderr: {0}", args.Data));
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void ProcessExited (object sendingProcess, EventArgs args)
    {
      Trace.WriteLine (string.Format ("[GdbServer] ProcessExited: {0}", args));
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
