////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.Common
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public sealed class GdbSetup : IDisposable
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public GdbSetup (AndroidProcess process, string gdbToolPath)
    {
      LoggingUtils.PrintFunction ();

      Process = process;

      Socket = "debug-socket";

      Host = "localhost";

      Port = 5039;

      CacheDirectory = string.Format (@"{0}\Android++\Cache\{1}\{2}", Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData), Process.HostDevice.ID, Process.Name);

      Directory.CreateDirectory (CacheDirectory);

      CacheSysRoot = Path.Combine (CacheDirectory, "sysroot");

      Directory.CreateDirectory (CacheSysRoot);

      GdbToolPath = gdbToolPath;

      GdbToolArguments = "--interpreter=mi";

      if (!File.Exists (gdbToolPath))
      {
        throw new FileNotFoundException ("Could not find requested GDB instance. Expected: " + gdbToolPath);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Dispose ()
    {
      LoggingUtils.PrintFunction ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public AndroidProcess Process { get; private set; }

    public string Socket { get; private set; }

    public string Host { get; private set; }

    public uint Port { get; private set; }

    public string CacheDirectory { get; private set; }

    public string CacheSysRoot { get; private set; }

    public string GdbToolPath { get; private set; }

    public string GdbToolArguments { get; private set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void SetupPortForwarding ()
    {
      // 
      // Setup network redirection.
      // 

      LoggingUtils.PrintFunction ();

      StringBuilder commandLineArgumentsBuilder = new StringBuilder ();

      commandLineArgumentsBuilder.AppendFormat ("tcp:{0} ", Port);

      if (!string.IsNullOrWhiteSpace (Socket))
      {
        commandLineArgumentsBuilder.AppendFormat ("localfilesystem:{0}/{1}", Process.InternalCacheDirectory, Socket);
      }
      else
      {
        commandLineArgumentsBuilder.AppendFormat ("tcp:{0} ", Port);
      }

      using (SyncRedirectProcess adbPortForward = AndroidAdb.AdbCommand (Process.HostDevice, "forward", commandLineArgumentsBuilder.ToString ()))
      {
        adbPortForward.StartAndWaitForExit (1000);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void ClearPortForwarding ()
    {
      // 
      // Clear network redirection.
      // 

      LoggingUtils.PrintFunction ();

      using (SyncRedirectProcess adbPortForward = AndroidAdb.AdbCommand (Process.HostDevice, "forward", "--remove-all"))
      {
        adbPortForward.StartAndWaitForExit (1000);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string [] CacheSystemBinaries ()
    {
      // 
      // Pull the required binaries from the device.
      // 

      LoggingUtils.PrintFunction ();

      List<string> deviceBinaries = new List<string> ();

      string [] remoteBinaries = 
      {
        "/system/bin/app_process",
        "/system/bin/linker",
        "/system/lib/libandroid.so",
        "/system/lib/libandroid_runtime.so",
        "/system/lib/libart.so",
        "/system/lib/libc.so",
        "/system/lib/libdvm.so",
        "/system/lib/libEGL.so",
        "/system/lib/libGLESv1_CM.so",
        "/system/lib/libGLESv2.so",
        "/system/lib/libGLESv3.so"
      };

      foreach (string binary in remoteBinaries)
      {
        string cachedBinary = Path.Combine (CacheSysRoot, binary.Substring (1));

        string cahedBinaryFullPath = Path.Combine (Path.GetDirectoryName (cachedBinary), Path.GetFileName (cachedBinary));

        Directory.CreateDirectory (Path.GetDirectoryName (cahedBinaryFullPath));

        if (File.Exists (cahedBinaryFullPath))
        {
          LoggingUtils.Print (string.Format ("[GdbSetup] Using cached {0}.", binary));
        }
        else if (Process.HostDevice.Pull (binary, cachedBinary))
        {
          LoggingUtils.Print (string.Format ("[GdbSetup] Pulled {0} from device/emulator.", binary));
        }

        deviceBinaries.Add (cahedBinaryFullPath);
      }

      return deviceBinaries.ToArray ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string [] CacheApplicationBinaries ()
    {
      // 
      // Application binaries (those under /lib/ of an installed application).
      // TODO: Consider improving this. Pulling libraries ensures consistency, but takes time (ADB is a slow protocol).
      // 

      LoggingUtils.PrintFunction ();

      string libraryCachePath = Path.Combine (CacheSysRoot, Process.InternalCacheDirectory.Substring (1), "lib");

      Directory.CreateDirectory (libraryCachePath);

      if (Process.HostDevice.Pull (string.Format ("{0}/lib/", Process.InternalCacheDirectory), libraryCachePath))
      {
        LoggingUtils.Print (string.Format ("[GdbSetup] Pulled application libraries from device/emulator."));

        string [] additionalLibraries = Directory.GetFiles (libraryCachePath, "lib*.so", SearchOption.AllDirectories);

        return additionalLibraries;
      }

      return new string [] {};
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string [] CreateGdbExecutionScript ()
    {
      LoggingUtils.PrintFunction ();

      List<string> gdbExecutionCommands = new List<string> ();

      //gdbExecutionCommands.Add ("set sysroot " + StringUtils.ConvertPathWindowsToPosix (CacheSysRoot));

      gdbExecutionCommands.Add ("set target-async on");

      gdbExecutionCommands.Add ("set breakpoint pending on");

#if DEBUG && FALSE
      gdbExecutionCommands.Add ("set debug remote 1");

      gdbExecutionCommands.Add ("set debug infrun 1");

      gdbExecutionCommands.Add ("set verbose on");
#endif

      return gdbExecutionCommands.ToArray ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
