////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.Common
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class MiVariable : IDisposable
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public MiVariable (string expression, List <MiResultValue> variableValues)
    {
      Expression = expression;

      Name = string.Empty;

      Type = string.Empty;

      ThreadId = 0;

      Dynamic = false;

      HasChildren = false;

      Value = string.Empty;

      Refresh (variableValues);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Dispose ()
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string Expression { get; protected set; }

    public string Name { get; protected set; }

    public string Type { get; protected set; }

    public uint ThreadId { get; protected set; }

    public bool Dynamic { get; protected set; }

    public bool HasChildren { get; protected set; }

    public string Value { get; protected set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Refresh (List<MiResultValue> variableValues)
    {
      foreach (MiResultValue resultValue in variableValues)
      {
        if (resultValue.HasField ("name"))
        {
          Name = resultValue ["name"] [0].GetString ();
        }

        if (resultValue.HasField ("type"))
        {
          Type = resultValue ["type"] [0].GetString ();
        }

        if (resultValue.HasField ("new_type"))
        {
          Type = resultValue ["new_type"] [0].GetString ();
        }

        if (resultValue.HasField ("thread-id"))
        {
          ThreadId = resultValue ["thread-id"] [0].GetUnsignedInt ();
        }

        if (resultValue.HasField ("dynamic"))
        {
          Dynamic = (resultValue ["dynamic"] [0].GetUnsignedInt () == 1);
        }

        if (Dynamic && (resultValue.HasField ("has_more")))
        {
          HasChildren = (resultValue ["has_more"] [0].GetUnsignedInt () != 0);
        }
        else
        {
          if (resultValue.HasField ("numchild"))
          {
            HasChildren = (resultValue ["numchild"] [0].GetUnsignedInt () != 0);
          }

          if (resultValue.HasField ("new_num_children"))
          {
            HasChildren = (resultValue ["new_num_children"] [0].GetUnsignedInt () != 0);
          }
        }

        if (resultValue.HasField ("value"))
        {
          Value = resultValue ["value"] [0].GetString ();
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public MiVariable GetChildren ()
    {
      throw new NotImplementedException ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
