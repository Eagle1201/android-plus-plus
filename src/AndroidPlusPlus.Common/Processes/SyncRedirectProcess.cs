////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Diagnostics;
using System.IO;
using System.Threading;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.Common
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class SyncRedirectProcess : RedirectProcess
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private Thread m_stdOutputThread = null;

    private Thread m_stdErrorThread = null;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public SyncRedirectProcess (string filename, string arguments, string workingDirectory = null)
      : base (filename, arguments, workingDirectory)
    {
      StandardOutput = string.Empty;

      StandardError = string.Empty;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public override void Start ()
    {
      base.Start ();

      if (StartInfo.RedirectStandardOutput)
      {
        m_stdOutputThread = new Thread (new ThreadStart (delegate ()
        {
          if (Process != null)
          {
            StandardOutput = Process.StandardOutput.ReadToEnd ();
          }
        }));

        m_stdOutputThread.Start ();
      }

      if (StartInfo.RedirectStandardError)
      {
        m_stdErrorThread = new Thread (new ThreadStart (delegate ()
        {
          if (Process != null)
          {
            StandardError = Process.StandardError.ReadToEnd ();
          }
        }));

        m_stdErrorThread.Start ();
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int StartAndWaitForExit ()
    {
      return StartAndWaitForExit (120000);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int StartAndWaitForExit (int executionTimeout)
    {
      Start ();

      WaitFor (executionTimeout);

      ExitCode = this.Process.ExitCode;

      return ExitCode;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private bool WaitFor (int timeout = 120000)
    {
      bool exited = false;

      Trace.Assert (Process != null);

      try
      {
        exited = Process.WaitForExit (timeout);
      }
      catch (Exception)
      {
        if (StartInfo.RedirectStandardOutput)
        {
          if ((m_stdOutputThread != null) && m_stdOutputThread.IsAlive)
          {
            try
            {
              m_stdOutputThread.Abort ();

              m_stdOutputThread.Join (10000);
            }
            catch (Exception)
            {
            }
          }
        }

        if (StartInfo.RedirectStandardError)
        {
          if ((m_stdErrorThread != null) && m_stdErrorThread.IsAlive)
          {
            try
            {
              m_stdErrorThread.Abort ();

              m_stdErrorThread.Join (10000);
            }
            catch (Exception)
            {
            }
          }
        }

        throw;
      }

      Trace.WriteLine (string.Format ("[SyncRedirectProcess] exited ({0}) in {1} ms", exited, Environment.TickCount - m_startTicks));

      return exited;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string StandardOutput { get; protected set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string StandardError { get; protected set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
