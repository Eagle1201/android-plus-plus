////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Threading;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.Common
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class SyncRedirectProcess : IDisposable
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected int m_startTicks = 0;

    protected int m_exitCode = 0;

    protected ManualResetEvent m_exitMutex = null;

    protected int m_lastOutputTimestamp = 0;

    protected StringBuilder m_stdOutputBuilder = null;

    protected StringBuilder m_stdErrorBuilder = null;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public SyncRedirectProcess (string filename, string arguments, string workingDirectory = null)
    {
      if (string.IsNullOrEmpty (filename))
      {
        throw new ArgumentNullException ("filename");
      }

      if (!File.Exists (filename))
      {
        throw new ArgumentException ("filename");
      }

      StartInfo = CreateDefaultStartInfo ();

      StartInfo.FileName = filename;

      StartInfo.Arguments = arguments;

      StartInfo.WorkingDirectory = workingDirectory ?? Path.GetDirectoryName (filename);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Dispose ()
    {
      LoggingUtils.PrintFunction ();

      try
      {
        Process.Dispose ();
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected static ProcessStartInfo CreateDefaultStartInfo ()
    {
      LoggingUtils.PrintFunction ();

      ProcessStartInfo startInfo = new ProcessStartInfo ();

      startInfo.CreateNoWindow = true;

      startInfo.UseShellExecute = false;

      startInfo.LoadUserProfile = false;

      startInfo.ErrorDialog = false;

      startInfo.RedirectStandardOutput = true;

      startInfo.RedirectStandardError = true;

      startInfo.RedirectStandardInput = true;

      return startInfo;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Start ()
    {
      LoggingUtils.Print (string.Format ("[SyncRedirectProcess] Start: {0} (Args=\"{1}\" Pwd=\"{2}\")", StartInfo.FileName, StartInfo.Arguments, StartInfo.WorkingDirectory));

      m_startTicks = Environment.TickCount;

      m_lastOutputTimestamp = m_startTicks;

      m_exitMutex = new ManualResetEvent (false);

      m_stdOutputBuilder = new StringBuilder ();

      m_stdErrorBuilder = new StringBuilder ();

      Process = Process.Start (StartInfo);

      Process.OutputDataReceived += new DataReceivedEventHandler (ProcessStdout);

      Process.ErrorDataReceived += new DataReceivedEventHandler (ProcessStderr);

      Process.Exited += new EventHandler (ProcessExited);

      Process.BeginOutputReadLine ();

      Process.BeginErrorReadLine ();

      Process.EnableRaisingEvents = true;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Kill ()
    {
      LoggingUtils.PrintFunction ();

      try
      {
        Process.Kill ();
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int StartAndWaitForExit ()
    {
      return StartAndWaitForExit (int.MaxValue);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int StartAndWaitForExit (int idleTimeout)
    {
      LoggingUtils.PrintFunction ();

      try
      {
        Start ();

        int timeoutFromCurrentTick = (idleTimeout + m_lastOutputTimestamp) - Environment.TickCount;

        bool responseSignaled = false;

        while ((!responseSignaled) && (timeoutFromCurrentTick > 0))
        {
          responseSignaled = m_exitMutex.WaitOne (0);

          if (!responseSignaled)
          {
            timeoutFromCurrentTick = (idleTimeout + m_lastOutputTimestamp) - Environment.TickCount;

            Thread.Yield ();
          }
        }

        if (!responseSignaled)
        {
          throw new TimeoutException ("Timed out waiting for synchronous redirect process.");
        }

        return m_exitCode;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        throw;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected void ProcessStdout (object sendingProcess, DataReceivedEventArgs args)
    {
      if (!string.IsNullOrWhiteSpace (args.Data))
      {
        //LoggingUtils.Print (string.Format ("[SyncRedirectProcess] ProcessStdout: {0}", args.Data));

        m_stdOutputBuilder.AppendLine (args.Data);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected void ProcessStderr (object sendingProcess, DataReceivedEventArgs args)
    {
      m_lastOutputTimestamp = Environment.TickCount;

      if (!string.IsNullOrWhiteSpace (args.Data))
      {
        //LoggingUtils.Print (string.Format ("[SyncRedirectProcess] ProcessStderr: {0}", args.Data));

        m_stdErrorBuilder.AppendLine (args.Data);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected void ProcessExited (object sendingProcess, EventArgs args)
    {
      m_lastOutputTimestamp = Environment.TickCount;

      LoggingUtils.Print (string.Format ("[SyncRedirectProcess] ProcessExited: {0}", args));

      StandardOutput = m_stdOutputBuilder.ToString ();

      StandardError = m_stdErrorBuilder.ToString ();

      m_exitCode = ((Process)sendingProcess).ExitCode;

      LoggingUtils.Print (string.Format ("[SyncRedirectProcess] exited ({0}) in {1} ms", m_exitCode, Environment.TickCount - m_startTicks));

      m_exitMutex.Set ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public Process Process { get; protected set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public ProcessStartInfo StartInfo { get; protected set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string StandardOutput { get; protected set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public string StandardError { get; protected set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
