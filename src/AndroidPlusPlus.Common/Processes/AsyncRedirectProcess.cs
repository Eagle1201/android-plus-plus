////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Diagnostics;
using System.IO;
using System.Threading;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.Common
{
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class AsyncRedirectProcess : RedirectProcess
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface EventListener
    {
      void ProcessStdout (object sendingProcess, DataReceivedEventArgs args);

      void ProcessStderr (object sendingProcess, DataReceivedEventArgs args);

      void ProcessExited (object sendingProcess, EventArgs args);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private TextWriter m_stdInputWriter;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public AsyncRedirectProcess (string filename, string arguments, string workingDirectory = null)
      : base (filename, arguments, workingDirectory)
    {
      m_stdInputWriter = null;

      Listener = null;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public EventListener Listener { get; set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public override void Start ()
    {
      base.Start ();

      Trace.WriteLine (string.Format ("[AsyncRedirectProcess] Start: "));

      if (Listener != null)
      {
        Process.OutputDataReceived += new DataReceivedEventHandler (Listener.ProcessStdout);

        Process.ErrorDataReceived += new DataReceivedEventHandler (Listener.ProcessStderr);

        Process.Exited += new EventHandler (Listener.ProcessExited);
      }
      else
      {
        Process.OutputDataReceived += new DataReceivedEventHandler (ProcessStdout);

        Process.ErrorDataReceived += new DataReceivedEventHandler (ProcessStderr);

        Process.Exited += new EventHandler (ProcessExited);
      }

      Process.BeginOutputReadLine ();

      Process.BeginErrorReadLine ();

      Process.EnableRaisingEvents = true;

      m_stdInputWriter = TextWriter.Synchronized (Process.StandardInput);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public override void Kill ()
    {
      base.Kill ();

      Trace.WriteLine (string.Format ("[AsyncRedirectProcess] Kill: "));
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public virtual void SendCommand (string command)
    {
      lock (this)
      {
        if (Process != null)
        {
          Trace.WriteLine (string.Format ("[AsyncRedirectProcess] SendCommand: {0}", command));

          m_stdInputWriter.WriteLine (command);
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected void ProcessStdout (object sendingProcess, DataReceivedEventArgs args)
    {
      if (!string.IsNullOrEmpty (args.Data))
      {
        Trace.WriteLine (string.Format ("[AsyncRedirectProcess] ProcessStdout: {0}", args.Data));

        if (Listener != null)
        {
          Listener.ProcessStdout (sendingProcess, args);
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected void ProcessStderr (object sendingProcess, DataReceivedEventArgs args)
    {
      if (!string.IsNullOrEmpty (args.Data))
      {
        Trace.WriteLine (string.Format ("[AsyncRedirectProcess] ProcessStdout: {0}", args.Data));

        if (Listener != null)
        {
          Listener.ProcessStderr (sendingProcess, args);
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected void ProcessExited (object sendingProcess, EventArgs args)
    {
      Trace.WriteLine (string.Format ("[AsyncRedirectProcess] ProcessExited: {0}", args));

      if (Listener != null)
      {
        Listener.ProcessExited (sendingProcess, args);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
