////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Microsoft.VisualStudio.Debugger.Interop;

using AndroidPlusPlus.Common;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsDebugEngine
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class CLangDebuggerVariableManager
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private readonly CLangDebugger m_debugger;

    private Dictionary<string, MiVariable> m_trackedVariables;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public CLangDebuggerVariableManager (CLangDebugger debugger)
    {
      m_debugger = debugger;

      m_trackedVariables = new Dictionary<string, MiVariable> ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public CLangDebuggeeProperty CreatePropertyFromVariable (CLangDebuggeeStackFrame stackFrame, MiVariable variable)
    {
      if (string.IsNullOrEmpty (variable.Expression))
      {
        // Child 'public', 'private', 'protected' properties have a zero-length expression. Skip these.

        return null;
      }

      return new CLangDebuggeeProperty (m_debugger, stackFrame, variable);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public MiVariable CreateVariableFromExpression (CLangDebuggeeStackFrame stackFrame, string expression)
    {
      IDebugThread2 stackThread;

      uint stackThreadId;

      LoggingUtils.RequireOk (stackFrame.GetThread (out stackThread));

      LoggingUtils.RequireOk (stackThread.GetThreadId (out stackThreadId));

      MiResultRecord resultRecord = m_debugger.GdbClient.SendCommand (string.Format ("-var-create --thread {0} --frame {1} - * {2} ", stackThreadId, stackFrame.StackLevel, PathUtils.EscapePath (expression)));

      if ((resultRecord == null) || ((resultRecord != null) && resultRecord.IsError ()))
      {
        return null;
      }

      return new MiVariable (expression, resultRecord.Results);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void CreateChildVariables (MiVariable parentVariable, int depth)
    {
      if (depth > 0)
      {
        MiResultRecord resultRecord = m_debugger.GdbClient.SendCommand (string.Format ("-var-list-children --all-values {0}", parentVariable.Name));

        if ((resultRecord == null) || ((resultRecord != null) && resultRecord.IsError ()))
        {
          throw new InvalidOperationException ();
        }

        if (resultRecord.HasField ("children"))
        {
          List<MiResultValue> childrenList = resultRecord ["children"] [0] ["child"];

          for (int i = 0; i < childrenList.Count; ++i)
          {
            MiVariable childVariable = null;

            MiResultValueTuple childTuple = childrenList [i] as MiResultValueTuple;

            string variableName = childTuple ["name"] [0].GetString ();

            if (childTuple.HasField ("exp"))
            {
              string variableExpression = childTuple ["exp"] [0].GetString ();

              if (!string.IsNullOrEmpty (variableExpression))
              {
                childVariable = new MiVariable (variableName, variableExpression);

                childVariable.Populate (childTuple.Values);
              }
            }

            if (childVariable == null)
            {
              childVariable = new MiVariable (variableName, childTuple.Values);
            }

            if (childVariable.HasChildren)
            {
              CreateChildVariables (childVariable, depth - 1);
            }

            parentVariable.AddChild (childVariable);
          }
        }
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void UpdateVariable (MiVariable variable)
    {
      MiResultRecord resultRecord = m_debugger.GdbClient.SendCommand (string.Format ("-var-update --all-values {0}", variable.Name));

      if ((resultRecord == null) || ((resultRecord != null) && resultRecord.IsError ()))
      {
        throw new InvalidOperationException ();
      }

      if (!resultRecord.HasField ("changelist"))
      {
        throw new InvalidOperationException ();
      }

      variable.Populate (resultRecord ["changelist"]);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private void DeleteGdbVariable (MiVariable gdbVariable)
    {
      MiResultRecord resultRecord = m_debugger.GdbClient.SendCommand (string.Format ("-var-delete {0}", gdbVariable.Name));

      if ((resultRecord == null) || ((resultRecord != null) && resultRecord.IsError ()))
      {
        throw new InvalidOperationException ();
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
