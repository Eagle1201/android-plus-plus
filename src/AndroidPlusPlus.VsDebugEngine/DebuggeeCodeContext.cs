////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;

using Microsoft.VisualStudio.Debugger.Interop;

using AndroidPlusPlus.Common;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsDebugEngine
{
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  // 
  // An implementation of IDebugCodeContext2 and IDebugMemoryContext2. 
  // IDebugMemoryContext2 represents a position in the address space of the machine running the program being debugged.
  // IDebugCodeContext2 represents the starting position of a code instruction. 
  // For most run-time architectures today, a code context can be thought of as an address in a program's execution stream.
  // 

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class DebuggeeCodeContext : IDebugCodeContext2, IDebugMemoryContext2, IDebugCodeContext100
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public class Enumerator : DebugEnumerator<IDebugCodeContext2, IEnumDebugCodeContexts2>, IEnumDebugCodeContexts2
    {
      public Enumerator (List<IDebugCodeContext2> contexts)
        : base (contexts)
      {
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private readonly DebugEngine m_engine;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public DebuggeeCodeContext (DebugEngine engine, DebuggeeDocumentContext documentContext, DebuggeeAddress address)
    {
      m_engine = engine;

      DocumentContext = documentContext;

      Address = address;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public DebuggeeDocumentContext DocumentContext { get; protected set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public DebuggeeAddress Address { get; set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugMemoryContext2 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int Add (ulong count, out IDebugMemoryContext2 offsetAddressContext)
    {
      // 
      // Adds a specified value to the current context's address to create a new context.
      // 

      LoggingUtils.PrintFunction ();

      try
      {
        DebuggeeAddress offsetAddress = Address.Add (count);

        offsetAddressContext = new DebuggeeCodeContext (m_engine, DocumentContext, offsetAddress);
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        offsetAddressContext = null;

        return DebugEngineConstants.E_FAIL;
      }

      return DebugEngineConstants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int Subtract (ulong count, out IDebugMemoryContext2 offsetAddressContext)
    {
      // 
      // Subtracts a specified value to the current context's address to create a new context.
      // 

      LoggingUtils.PrintFunction ();

      try
      {
        DebuggeeAddress offsetAddress = Address.Subtract (count);

        offsetAddressContext = new DebuggeeCodeContext (m_engine, DocumentContext, offsetAddress);
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        offsetAddressContext = null;

        return DebugEngineConstants.E_FAIL;
      }

      return DebugEngineConstants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int Compare (enum_CONTEXT_COMPARE contextCompare, IDebugMemoryContext2 [] compareToItems, uint compareToLength, out uint foundIndex)
    {
      // 
      // Compares the memory context to each context in the given array in the manner indicated by compare flags, 
      // returning an index of the first context that matches.
      // 

      LoggingUtils.PrintFunction ();

      try
      {
        if (compareToItems.Length != compareToLength)
        {
          throw new ArgumentException ();
        }

        for (uint i = 0; i < compareToLength; ++i)
        {
          DebuggeeCodeContext compareTo = compareToItems [i] as DebuggeeCodeContext;

          if (compareTo == null)
          {
            continue;
          }

          if (!DebugEngine.ReferenceEquals (m_engine, compareTo.m_engine))
          {
            continue;
          }

          bool comparisonResult = false;

          switch (contextCompare)
          {
            case enum_CONTEXT_COMPARE.CONTEXT_EQUAL:
            {
              comparisonResult = (Address.CompareTo (compareTo.Address) == 0);

              break;
            }

            case enum_CONTEXT_COMPARE.CONTEXT_LESS_THAN:
            {
              comparisonResult = (Address.CompareTo (compareTo.Address) < 0);

              break;
            }

            case enum_CONTEXT_COMPARE.CONTEXT_GREATER_THAN:
            {
              comparisonResult = (Address.CompareTo (compareTo.Address) > 0);

              break;
            }

            case enum_CONTEXT_COMPARE.CONTEXT_LESS_THAN_OR_EQUAL:
            {
              comparisonResult = (Address.CompareTo (compareTo.Address) <= 0);

              break;
            }

            case enum_CONTEXT_COMPARE.CONTEXT_GREATER_THAN_OR_EQUAL:
            {
              comparisonResult = (Address.CompareTo (compareTo.Address) >= 0);

              break;
            }

            case enum_CONTEXT_COMPARE.CONTEXT_SAME_SCOPE:
            // Fallthrough.
            case enum_CONTEXT_COMPARE.CONTEXT_SAME_FUNCTION:
            // Fallthrough.
            case enum_CONTEXT_COMPARE.CONTEXT_SAME_MODULE:
            // Fallthrough.
            case enum_CONTEXT_COMPARE.CONTEXT_SAME_PROCESS:
            // Fallthrough.
            default:
            {
              throw new NotImplementedException ();
            }
          }

          if (comparisonResult)
          {
            foundIndex = i;

            return DebugEngineConstants.S_OK;
          }
        }
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        foundIndex = uint.MaxValue;

        return DebugEngineConstants.E_COMPARE_CANNOT_COMPARE;
      }

      foundIndex = uint.MaxValue;

      return DebugEngineConstants.S_FALSE;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetName (out string contextName)
    {
      // 
      // Gets the user-displayable name for this context
      // 

      LoggingUtils.PrintFunction ();

      contextName = Address.ToString ();

      return DebugEngineConstants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetInfo (enum_CONTEXT_INFO_FIELDS requestedFields, CONTEXT_INFO [] infoArray)
    {
      // 
      // Gets information that describes this context.
      // 

      LoggingUtils.PrintFunction ();

      try
      {
        infoArray [0] = new CONTEXT_INFO ();

        if ((Address != null) && (requestedFields & enum_CONTEXT_INFO_FIELDS.CIF_ADDRESS) != 0)
        {
          infoArray [0].bstrAddress = Address.ToString ();

          infoArray [0].dwFields |= enum_CONTEXT_INFO_FIELDS.CIF_ADDRESS;
        }

        if ((Address != null) && (requestedFields & enum_CONTEXT_INFO_FIELDS.CIF_ADDRESSOFFSET) != 0)
        {
          infoArray [0].bstrAddressOffset = Address.ToString ();

          infoArray [0].dwFields |= enum_CONTEXT_INFO_FIELDS.CIF_ADDRESSOFFSET;
        }

        if ((Address != null) && (requestedFields & enum_CONTEXT_INFO_FIELDS.CIF_ADDRESSABSOLUTE) != 0)
        {
          infoArray [0].bstrAddressAbsolute = Address.ToString ();

          infoArray [0].dwFields |= enum_CONTEXT_INFO_FIELDS.CIF_ADDRESSABSOLUTE;
        }

        if ((requestedFields & enum_CONTEXT_INFO_FIELDS.CIF_MODULEURL) != 0)
        {
          infoArray [0].bstrModuleUrl = "";

          infoArray [0].dwFields |= enum_CONTEXT_INFO_FIELDS.CIF_MODULEURL;
        }

        if ((requestedFields & enum_CONTEXT_INFO_FIELDS.CIF_FUNCTION) != 0)
        {
          infoArray [0].bstrFunction = "<not implemented>";

          infoArray [0].dwFields |= enum_CONTEXT_INFO_FIELDS.CIF_FUNCTION;
        }

        if ((DocumentContext != null) && (requestedFields & enum_CONTEXT_INFO_FIELDS.CIF_FUNCTIONOFFSET) != 0)
        {
          TEXT_POSITION [] startOffset = new TEXT_POSITION [1];

          TEXT_POSITION [] endOffset = new TEXT_POSITION [1];

          LoggingUtils.RequireOk (DocumentContext.GetStatementRange (startOffset, endOffset));

          infoArray [0].posFunctionOffset = startOffset [0];

          infoArray [0].dwFields |= enum_CONTEXT_INFO_FIELDS.CIF_FUNCTIONOFFSET;
        }
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return DebugEngineConstants.E_FAIL;
      }

      return DebugEngineConstants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugCodeContext2 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetDocumentContext (out IDebugDocumentContext2 documentContext)
    {
      // 
      // Gets the document context for this code-context.
      // 

      LoggingUtils.PrintFunction ();

      try
      {
        documentContext = DocumentContext;

        if (documentContext == null)
        {
          throw new InvalidOperationException ();
        }
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        documentContext = null;

        return DebugEngineConstants.E_FAIL;
      }

      return DebugEngineConstants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetLanguageInfo (ref string languageName, ref Guid languageGuid)
    {
      // 
      // Gets the language information for this code context.
      // 

      LoggingUtils.PrintFunction ();

      languageName = "Unknown";

      languageGuid = Guid.Empty;

      try
      {
        IDebugDocumentContext2 documentContext = null;

        LoggingUtils.RequireOk (GetDocumentContext (out documentContext));

        if (documentContext == null)
        {
          throw new InvalidOperationException ();
        }

        return documentContext.GetLanguageInfo (ref languageName, ref languageGuid);
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return DebugEngineConstants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugCodeContext100 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetProgram (out IDebugProgram2 program)
    {
      LoggingUtils.PrintFunction ();

      program = m_engine.Program;

      if (program == null)
      {
        return DebugEngineConstants.E_FAIL;
      }

      return DebugEngineConstants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
