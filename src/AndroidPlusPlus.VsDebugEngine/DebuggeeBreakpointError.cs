////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Diagnostics;

using Microsoft.VisualStudio.Debugger.Interop;

using AndroidPlusPlus.Common;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsDebugEngine
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class DebuggeeBreakpointError : IDebugErrorBreakpoint2
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public sealed class Enumerator : DebugEnumerator<IDebugErrorBreakpoint2, IEnumDebugErrorBreakpoints2>, IEnumDebugErrorBreakpoints2
    {
      public Enumerator (IDebugErrorBreakpoint2 [] breakpoints)
        : base (breakpoints)
      {
      }

      public Enumerator (List<IDebugErrorBreakpoint2> breakpoints)
        : base (breakpoints)
      {
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public sealed class Event : AsynchronousDebugEvent, IDebugBreakpointErrorEvent2
    {
      private readonly IDebugErrorBreakpoint2 m_errorBreakpoint;

      public Event (IDebugErrorBreakpoint2 errorBreakpoint)
      {
        m_errorBreakpoint = errorBreakpoint;
      }

      public int GetErrorBreakpoint(out IDebugErrorBreakpoint2 ppErrorBP)
      {
        ppErrorBP = m_errorBreakpoint;

        return DebugEngineConstants.S_OK;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected readonly DebugBreakpointManager m_breakpointManager;

    private readonly DebuggeeBreakpointPending m_pendingBreakpoint;

    protected readonly DebuggeeCodeContext m_codeContext;

    private readonly IDebugErrorBreakpointResolution2 m_breakpointResolution;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public DebuggeeBreakpointError (DebugBreakpointManager breakpointManager, DebuggeeBreakpointPending pendingBreakpoint, DebuggeeCodeContext codeContext, string error)
    {
      if (breakpointManager == null)
      {
        throw new ArgumentNullException ("breakpointManager");
      }

      if (pendingBreakpoint == null)
      {
        throw new ArgumentNullException ("pendingBreakpoint");
      }

      if (codeContext == null)
      {
        throw new ArgumentNullException ("codeContext");
      }

      m_breakpointManager = breakpointManager;

      m_pendingBreakpoint = pendingBreakpoint;

      m_codeContext = codeContext;

      m_breakpointResolution = new DebuggeeBreakpointResolution (m_codeContext, error);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugErrorBreakpoint2 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetBreakpointResolution (out IDebugErrorBreakpointResolution2 ppErrorResolution)
    {
      LoggingUtils.PrintFunction ();

      ppErrorResolution = m_breakpointResolution;

      return DebugEngineConstants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetPendingBreakpoint (out IDebugPendingBreakpoint2 ppPendingBreakpoint)
    {
      LoggingUtils.PrintFunction ();

      ppPendingBreakpoint = m_pendingBreakpoint;

      return DebugEngineConstants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
