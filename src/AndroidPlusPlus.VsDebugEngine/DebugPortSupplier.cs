////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;
using Microsoft.VisualStudio.Debugger.Interop;
using AndroidPlusPlus.Common;
using AndroidPlusPlus.VsDebugCommon;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsDebugEngine
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  [ComVisible(true)]

  [Guid(DebugEngineGuids.guidDebugPortSupplierStringCLSID)]

  [ClassInterface (ClassInterfaceType.None)]

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class DebugPortSupplier : IDebugPortSupplier3, IDebugPortSupplierDescription2
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private class DebugPortEnumerator : DebugEnumerator <IDebugPort2, IEnumDebugPorts2>, IEnumDebugPorts2
    {
      public DebugPortEnumerator (List <IDebugPort2> ports)
        : base (ports)
      {
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private Dictionary <string, IDebugPort2> m_registeredPorts;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public DebugPortSupplier ()
    {
      m_registeredPorts = new Dictionary<string, IDebugPort2> ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugPortSupplier2 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int AddPort (IDebugPortRequest2 pRequest, out IDebugPort2 ppPort)
    {
      // 
      // Attempt to find a port matching the requested name, refreshes and iterates updated ports via EnumPorts.
      // 

      LoggingUtils.PrintFunction ();

      try
      {
        if (CanAddPort () == Constants.S_OK)
        {
          string requestPortName;

          IEnumDebugPorts2 portListEnum;

          if ((pRequest.GetPortName (out requestPortName) == Constants.S_OK) && (EnumPorts (out portListEnum) == Constants.S_OK))
          {
            foreach (KeyValuePair<string, IDebugPort2> keyPair in m_registeredPorts)
            {
              string portName;

              IDebugPort2 registeredPort = keyPair.Value;

              if ((registeredPort.GetPortName (out portName) == Constants.S_OK) && (portName.Equals (requestPortName)))
              {
                ppPort = registeredPort;

                return Constants.S_OK;
              }
            }
          }
        }
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);
      }

      ppPort = null;

      return Constants.E_FAIL;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int CanAddPort ()
    {
      // 
      // Verifies that a port supplier can add new ports.
      // 

      LoggingUtils.PrintFunction ();

      return Constants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int EnumPorts (out IEnumDebugPorts2 ppEnum)
    {
      // 
      // Retrieves a list of all the ports supplied by a port supplier.
      // 

      LoggingUtils.PrintFunction ();

      try
      {
        AndroidAdb.Refresh ();

        List<IDebugPort2> ports = new List<IDebugPort2> ();

        AndroidDevice [] connectedDevices = AndroidAdb.GetConnectedDevices ();

        foreach (AndroidDevice device in connectedDevices)
        {
          IDebugPort2 debugPort;

          if (!m_registeredPorts.TryGetValue (device.ID, out debugPort))
          {
            debugPort = new DebuggeePort (this, device);

            m_registeredPorts.Add (device.ID, debugPort);
          }

          ports.Add (debugPort);
        }

        ppEnum = new DebugPortEnumerator (ports);

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        ppEnum = null;

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetPort (ref Guid guidPort, out IDebugPort2 ppPort)
    {
      // 
      // Gets a port from a port supplier.
      // 

      LoggingUtils.PrintFunction ();

      ppPort = null;

      try
      {
        foreach (KeyValuePair<string, IDebugPort2> keyPair in m_registeredPorts)
        {
          Guid portGuid;

          IDebugPort2 registeredPort = keyPair.Value;

          LoggingUtils.RequireOk (registeredPort.GetPortId (out portGuid));

          if (portGuid.Equals (guidPort))
          {
            ppPort = registeredPort;

            return Constants.S_OK;
          }
        }
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }

      return Constants.E_PORTSUPPLIER_NO_PORT;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetPortSupplierId (out Guid pguidPortSupplier)
    {
      // 
      // Gets the port supplier identifier.
      // 

      LoggingUtils.PrintFunction ();

      pguidPortSupplier = DebugEngineGuids.guidDebugPortSupplierID;

      return Constants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetPortSupplierName (out string pbstrName)
    {
      // 
      // Gets the port supplier name.
      // 

      LoggingUtils.PrintFunction ();

      pbstrName = "Android++";

      return Constants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int RemovePort (IDebugPort2 pPort)
    {
      // 
      // Removes a port. This method removes the port from the port supplier's internal list of active ports.
      // 

      LoggingUtils.PrintFunction ();

      try
      {
        if (!(pPort is DebuggeePort))
        {
          throw new ArgumentException ("pPort");
        }

        DebuggeePort port = (DebuggeePort) pPort;

        m_registeredPorts.Remove (port.PortDevice.ID);

        return Constants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugPortSupplier3 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int CanPersistPorts ()
    {
      // 
      // This method determines whether the port supplier can persist ports (by writing them to disk) between invocations of the debugger.
      // 

      LoggingUtils.PrintFunction ();

      return Constants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int EnumPersistedPorts (BSTR_ARRAY PortNames, out IEnumDebugPorts2 ppEnum)
    {
      // 
      // This method retrieves an object that allows enumeration of the list of persisted ports.
      // 

      LoggingUtils.PrintFunction ();

      ppEnum = null;

      try
      {
        throw new NotImplementedException ();
      }
      catch (NotImplementedException e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_NOTIMPL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugPortSupplierDescription2 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetDescription (enum_PORT_SUPPLIER_DESCRIPTION_FLAGS [] pdwFlags, out string pbstrText)
    {
      // 
      // Retrieves the description and description metadata for the port supplier.
      // 

      LoggingUtils.PrintFunction ();

      pbstrText = string.Empty;

      try
      {
        pdwFlags [0] = 0;

        pbstrText = "---";
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return Constants.E_FAIL;
      }

      return Constants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
