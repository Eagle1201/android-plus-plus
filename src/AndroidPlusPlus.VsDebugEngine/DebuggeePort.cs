////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.ComTypes;
using Microsoft.VisualStudio.Debugger.Interop;
using AndroidPlusPlus.Common;
using Microsoft.VisualStudio;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.VsDebugEngine
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class DebuggeePort : IDebugPort2, IDebugPortNotify2, IConnectionPoint, IConnectionPointContainer
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private class Enumerator : DebugEnumerator<IDebugPort2, IEnumDebugPorts2>, IEnumDebugPorts2
    {
      public Enumerator (List<IDebugPort2> ports)
        : base (ports)
      {
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    private readonly IDebugPortSupplier2 m_portSupplier;

    private readonly AndroidDevice m_portDevice;

    private readonly Guid m_portGuid;

    private Dictionary<string, HashSet<uint>> m_deviceProcessesPidsByName;

    private Dictionary<uint, DebuggeeProcess> m_deviceProcessesByPid;

    private Dictionary<int, IDebugPortEvents2> m_eventConnectionPoints;

    private int m_eventConnectionPointCookie = 1;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public DebuggeePort (IDebugPortSupplier2 portSupplier, AndroidDevice device)
    {
      m_portSupplier = portSupplier;

      m_portDevice = device;

      m_portGuid = Guid.NewGuid ();

      m_deviceProcessesPidsByName = new Dictionary<string, HashSet<uint>> ();

      m_deviceProcessesByPid = new Dictionary<uint, DebuggeeProcess> ();

      m_eventConnectionPoints = new Dictionary<int, IDebugPortEvents2> ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public AndroidDevice PortDevice 
    {
      get
      {
        return m_portDevice;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int RefreshProcesses ()
    {
      // 
      // Check which processes are currently running on the target device (port).
      // 

      LoggingUtils.PrintFunction ();

      try
      {
        m_portDevice.Refresh ();

        m_deviceProcessesByPid.Clear ();

        m_deviceProcessesPidsByName.Clear ();

        uint [] deviceActivePids = m_portDevice.GetActivePids ();

        foreach (uint pid in deviceActivePids)
        {
          AndroidProcess process = m_portDevice.GetProcessFromPid (pid);

          m_deviceProcessesByPid [pid] = new DebuggeeProcess (this, process);

          HashSet<uint> processPids;

          if (!m_deviceProcessesPidsByName.TryGetValue (process.Name, out processPids))
          {
            processPids = new HashSet<uint> ();
          }

          processPids.Add (process.Pid);

          m_deviceProcessesPidsByName [process.Name] = processPids;
        }

        return DebugEngineConstants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return DebugEngineConstants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public DebuggeeProcess GetProcessFromPid (uint processId)
    {
      DebuggeeProcess process;

      if (m_deviceProcessesByPid.TryGetValue (processId, out process))
      {
        return process;
      }

      return null;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public DebuggeeProcess [] GetProcessesFromName (string processName)
    {
      HashSet<uint> processPidList;

      List<DebuggeeProcess> processList = new List<DebuggeeProcess> ();

      if (m_deviceProcessesPidsByName.TryGetValue (processName, out processPidList))
      {
        foreach (uint pid in processPidList)
        {
          processList.Add (GetProcessFromPid (pid));
        }
      }

      return processList.ToArray ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugPort2 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int EnumProcesses (out IEnumDebugProcesses2 ppEnum)
    {
      // 
      // Returns a list of all the processes running on a port.
      // 

      LoggingUtils.PrintFunction ();

      try
      {
        LoggingUtils.RequireOk (RefreshProcesses ());

        DebuggeeProcess [] processes = new DebuggeeProcess [m_deviceProcessesByPid.Values.Count];

        m_deviceProcessesByPid.Values.CopyTo (processes, 0);

        ppEnum = new DebuggeeProcess.Enumerator (processes);

        return DebugEngineConstants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        ppEnum = null;

        return DebugEngineConstants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetPortId (out Guid pguidPort)
    {
      // 
      // Gets the port identifier.
      // 

      LoggingUtils.PrintFunction ();

      pguidPort = m_portGuid;

      return DebugEngineConstants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetPortName (out string pbstrName)
    {
      // 
      // Gets the port name.
      // 

      LoggingUtils.PrintFunction ();

      pbstrName = "adb://" + m_portDevice.ID;

      return DebugEngineConstants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetPortRequest (out IDebugPortRequest2 ppRequest)
    {
      // 
      // Gets the description of a port that was previously used to create the port (if available).
      // 

      LoggingUtils.PrintFunction ();

      ppRequest = null;

      return DebugEngineConstants.E_PORT_NO_REQUEST;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetPortSupplier (out IDebugPortSupplier2 ppSupplier)
    {
      // 
      // Gets the port supplier for this port.
      // 

      LoggingUtils.PrintFunction ();

      ppSupplier = m_portSupplier;

      return DebugEngineConstants.S_OK;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int GetProcess (AD_PROCESS_ID ProcessId, out IDebugProcess2 ppProcess)
    {
      // 
      // Gets the specified process running on a port.
      // 

      LoggingUtils.PrintFunction ();

      ppProcess = null;

      try
      {
        if (ProcessId.ProcessIdType == (uint)enum_AD_PROCESS_ID.AD_PROCESS_ID_SYSTEM)
        {
          LoggingUtils.RequireOk (RefreshProcesses ());

          DebuggeeProcess process = null;

          if (!m_deviceProcessesByPid.TryGetValue (ProcessId.dwProcessId, out process))
          {
            throw new InvalidOperationException (string.Format ("Could not locate requested process. Pid: {0}", ProcessId.dwProcessId));
          }

          ppProcess = process as IDebugProcess2;
        }
        else /*if (ProcessId.ProcessIdType == (uint) enum_AD_PROCESS_ID.AD_PROCESS_ID_GUID)*/
        {
          throw new NotImplementedException ();
        }

        return DebugEngineConstants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return DebugEngineConstants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IDebugPortNotify2 Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [InheritGuid (typeof (IDebugProgramCreateEvent2))]
    public sealed class ProgramCreate : ImmediateDebugEvent, IDebugProgramCreateEvent2
    {
      // Immediate-mode implementation of a 'ProgramCreate' event.
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int AddProgramNode (IDebugProgramNode2 pProgramNode)
    {
      // 
      // Registers a program that can be debugged with the port it is running on.
      // 

      LoggingUtils.PrintFunction ();

      try
      {
        IDebugProcess2 process;

        DebuggeeProgram program = pProgramNode as DebuggeeProgram;

        LoggingUtils.RequireOk (program.GetProcess (out process));

        foreach (IDebugPortEvents2 connectionPoint in m_eventConnectionPoints.Values)
        {
          ProgramCreate debugEvent = new ProgramCreate ();

          Guid eventGuid = ComUtils.GuidOf (debugEvent);

          int handle = connectionPoint.Event (null, this, process, program, debugEvent, eventGuid);

          if (handle == unchecked ((int)0x80010108)) // RPC_E_DISCONNECTED
          {
            continue; // Connection point was previously used.
          }

          LoggingUtils.RequireOk (handle);
        }

        return DebugEngineConstants.S_OK;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        return DebugEngineConstants.E_FAIL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public int RemoveProgramNode (IDebugProgramNode2 pProgramNode)
    {
      // 
      // Unregisters a program that can be debugged from the port it is running on.
      // 

      LoggingUtils.PrintFunction ();

      try
      {
        throw new NotImplementedException ();
      }
      catch (NotImplementedException e)
      {
        LoggingUtils.HandleException (e);

        return DebugEngineConstants.E_NOTIMPL;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IConnectionPoint Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Advise (object pUnkSink, out int pdwCookie)
    {
      // 
      // Establishes an advisory connection between the connection point and the caller's sink object.
      // 

      LoggingUtils.PrintFunction ();

      try
      {
        IDebugPortEvents2 portEvent = (IDebugPortEvents2) pUnkSink;

        m_eventConnectionPoints.Add (m_eventConnectionPointCookie, portEvent);

        pdwCookie = m_eventConnectionPointCookie++;
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);

        pdwCookie = 0;
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void EnumConnections (out IEnumConnections ppEnum)
    {
      // 
      // Creates an enumerator object for iteration through the connections that exist to this connection point.
      // 

      LoggingUtils.PrintFunction ();

      throw new NotImplementedException ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void GetConnectionInterface (out Guid pIID)
    {
      // 
      // Returns the IID of the outgoing interface managed by this connection point.
      // 

      LoggingUtils.PrintFunction ();

      pIID = ComUtils.GuidOf (typeof (IDebugPortEvents2));
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void GetConnectionPointContainer (out IConnectionPointContainer ppCPC)
    {
      // 
      // Retrieves the IConnectionPointContainer interface pointer to the connectable object that conceptually owns this connection point.
      // 

      LoggingUtils.PrintFunction ();

      ppCPC = this;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void Unadvise (int dwCookie)
    {
      // 
      // Terminates an advisory connection previously established through the System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@) method.
      // 

      LoggingUtils.PrintFunction ();

      try
      {
        m_eventConnectionPoints.Remove (dwCookie);
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #region IConnectionPointContainer Members

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void EnumConnectionPoints (out IEnumConnectionPoints ppEnum)
    {
      // 
      // Creates an enumerator of all the connection points supported in the connectable object, one connection point per IID.
      // 

      LoggingUtils.PrintFunction ();

      throw new NotImplementedException ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void FindConnectionPoint (ref Guid riid, out IConnectionPoint ppCP)
    {
      // 
      // Asks the connectible object if it has a connection point for a particular IID, 
      // and if so, returns the IConnectionPoint interface pointer to that connection point.
      // 

      LoggingUtils.PrintFunction ();

      ppCP = null;

      try
      {
        Guid connectionPort;

        GetConnectionInterface (out connectionPort);

        if (riid.Equals (connectionPort))
        {
          ppCP = this;
        }
      }
      catch (Exception e)
      {
        LoggingUtils.HandleException (e);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
