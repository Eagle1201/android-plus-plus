////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using System.Text.RegularExpressions;
using System.IO;
using System.Runtime.InteropServices;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.MsBuild.Common
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class PathUtils
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public const int CommandLineLength = 8191;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static string SantiseWindowsPath (string path)
    {
      // 
      // Sanitise a Windows path.
      // 

      string expandedPath;

      if (path.Contains ("~"))
      {
        expandedPath = GetLongPathName (path);
      }
      else
      {
        expandedPath = path;
      }

      StringBuilder workingBuffer = new StringBuilder (expandedPath);

      workingBuffer.Replace (@"\\", "/");

      workingBuffer.Replace (@"\", "/");

      return QuoteIfNeeded (EscapePath (workingBuffer.ToString ()));
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static string ConvertPathWindowsToMingw (string path)
    {
      // 
      // Convert Windows path in to a Mingw-style path. I.e: C:\Windows\System32 -> /c/windows/system32
      // 

      string expandedPath;

      if (path.Contains ("~"))
      {
        expandedPath = GetLongPathName (path);
      }
      else
      {
        expandedPath = path;
      }

      StringBuilder workingBuffer = new StringBuilder (expandedPath);

      workingBuffer.Replace ('\\', '/');

      string driveRoot = Path.GetPathRoot (path);

      if (!string.IsNullOrEmpty (driveRoot))
      {
        workingBuffer.Replace (driveRoot, "/" + driveRoot.Substring (0, 1).ToLower () + "/");
      }

      return QuoteIfNeeded (workingBuffer.ToString ());
    }


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static string ConvertPathWindowsToCygwin (string path)
    {
      // 
      // Convert Windows path in to a Cygwin-style path. I.e: C:\Windows\System32 -> /cygdrive/c/Windows/System32
      // 

      return "/cygdrive" + ConvertPathWindowsToMingw (path);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static string ConvertPathMingwToWindows (string path)
    {
      // 
      // Convert a Mingw path in to a Windows path. I.e: /c/Windows/System32 -> C:\Windows\System32
      // 

      StringBuilder workingBuffer = new StringBuilder (path);

      if (workingBuffer [0] == '/' && workingBuffer [2] == '/')
      {
        workingBuffer.Replace (path.Substring (0, 3), char.ToUpper (workingBuffer [1]) + ":\\");
      }

      workingBuffer.Replace ('/', '\\');

      workingBuffer.Replace ("\\\\", "\\");

      return workingBuffer.ToString ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static string ConvertPathCygwinToWindows (string path)
    {
      StringBuilder workingBuffer = new StringBuilder (path);

      workingBuffer.Replace ("/cygdrive", "");

      return ConvertPathMingwToWindows (workingBuffer.ToString ());
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static string QuoteIfNeeded (string arg)
    {
      // 
      // Add quotes around a string, if they are needed.
      // 

      if (arg.StartsWith ("\""))
      {
        return arg;
      }

      var match = arg.IndexOfAny (new char [] { ' ', '\t', ';', '&' }) != -1;

      if (!match)
      {
        return arg;
      }

      return "\"" + arg + "\"";
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static string EscapePath (string input)
    {
      StringBuilder escapedStringBuilder = new StringBuilder (input);

      escapedStringBuilder.Replace (@"\", @"\\");

      escapedStringBuilder.Replace (@" ", @"\ ");

      return escapedStringBuilder.ToString ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static string UnescapePath (string input)
    {
      StringBuilder unescapedStringBuilder = new StringBuilder (input);

      unescapedStringBuilder.Replace (@"\\", @"\");

      unescapedStringBuilder.Replace (@"\ ", @" ");

      return unescapedStringBuilder.ToString ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static string GetShortPathName (string path)
    {
      StringBuilder shortPath = new StringBuilder (260);

      GetShortPathName (path, shortPath, shortPath.Capacity);

      return shortPath.ToString ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [DllImport ("kernel32.dll", CharSet = CharSet.Unicode)]
    private static extern int GetShortPathName ([MarshalAs (UnmanagedType.LPWStr)] string path, [MarshalAs (UnmanagedType.LPWStr)] StringBuilder shortPath, int shortPathLength);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public static string GetLongPathName (string path)
    {
      StringBuilder longPath = new StringBuilder (1024);

      GetLongPathName (path, longPath, longPath.Capacity);

      return longPath.ToString ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [DllImport ("kernel32.dll", CharSet = CharSet.Unicode)]
    private static extern int GetLongPathName ([MarshalAs (UnmanagedType.LPWStr)] string path, [MarshalAs (UnmanagedType.LPWStr)] StringBuilder longPath, int longPathLength);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }


  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
