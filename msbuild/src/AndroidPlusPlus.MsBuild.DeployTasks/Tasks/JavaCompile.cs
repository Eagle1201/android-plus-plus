////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Reflection;
using System.Resources;

using Microsoft.Build.Framework;
using Microsoft.Win32;
using Microsoft.Build.Utilities;

using AndroidPlusPlus.MsBuild.Common;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace AndroidPlusPlus.MsBuild.DeployTasks
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class JavaCompile : TrackedOutOfDateToolTask, ITask
  {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    HashSet<string> m_outputClassPackages;

    List<ITaskItem> m_outputClassSourceFiles;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public JavaCompile ()
      : base (new ResourceManager ("AndroidPlusPlus.MsBuild.DeployTasks.Properties.Resources", Assembly.GetExecutingAssembly ()))
    {
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    [Required]
    public string JavaHomeDir { get; set; }

    [Output]
    public ITaskItem [] OutputClassPaths { get; set; }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override bool Setup ()
    {
      if (base.Setup ())
      {
        m_outputClassPackages = new HashSet<string> ();

        m_outputClassSourceFiles = new List<ITaskItem> ();

        return true;
      }

      return false;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override int TrackedExecuteTool (string pathToTool, string responseFileCommands, string commandLineCommands)
    {
      int retCode = -1;

      try
      {
        m_outputClassPackages.Clear ();

        m_outputClassSourceFiles.Clear ();

        retCode = base.TrackedExecuteTool (pathToTool, responseFileCommands, commandLineCommands);
      }
      catch (Exception e)
      {
        Log.LogErrorFromException (e, true);

        retCode = -1;
      }
      finally
      {
        if (retCode == 0)
        {
          // 
          // Export listing of compiled .class outputs and the default class path.
          // 

          string defaultClassPath = Sources [0].GetMetadata ("ClassOutputDirectory");

          ITaskItem defaultClassPathItem = new TaskItem (defaultClassPath);

          defaultClassPathItem.SetMetadata ("ClassPaths", defaultClassPath);

          OutputClassPaths = new ITaskItem [] { defaultClassPathItem };

          OutputFiles = m_outputClassSourceFiles.ToArray ();
        }
      }

      return retCode;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override void TrackedExecuteToolOutput (KeyValuePair<string, List<ITaskItem>> commandAndSourceFiles, string singleLine)
    {
      try
      {
        if (!string.IsNullOrWhiteSpace (singleLine))
        {
          // 
          // Intercept output class filenames and package addresses
          // .
          // e.g.
          //  [checking com.example.nativemedia.MyRenderer]
          //  [wrote AndroidMT\Debug\bin\classes\com\example\nativemedia\MyRenderer.class]
          // 

          if (singleLine.StartsWith ("["))
          {
            if (Sources [0].GetMetadata ("Verbose") == "true")
            {
              LogEventsFromTextOutput (string.Format ("[{0}] {1}", ToolName, singleLine), MessageImportance.High);
            }

            string sanitisedOutput = singleLine.Trim (new char [] { ' ', '[', ']' });

            if (sanitisedOutput.StartsWith ("checking "))
            {
              string packageNameWithClassName = sanitisedOutput.Substring ("checking ".Length);

              string packageNameWithoutClass = packageNameWithClassName.Substring (0, packageNameWithClassName.LastIndexOf ('.'));

              if (!m_outputClassPackages.Contains (packageNameWithoutClass))
              {
                m_outputClassPackages.Add (packageNameWithoutClass);
              }
            }
            else if (sanitisedOutput.StartsWith ("wrote "))
            {
              string classFilePath = Path.GetFullPath (sanitisedOutput.Substring ("wrote ".Length));

              ITaskItem classFileItem = new TaskItem (classFilePath);

              classFileItem.SetMetadata ("ClassOutputDirectory", Sources [0].GetMetadata ("ClassOutputDirectory"));

              m_outputClassSourceFiles.Add (classFileItem);
            }
          }
          else if (singleLine.Contains ("errors"))
          {
            Log.LogError (singleLine);
          }
          else
          {
            // 
            // TODO: Process errors and warnings.
            // 

            LogEventsFromTextOutput (string.Format ("[{0}] {1}", ToolName, singleLine), MessageImportance.High);
          }
        }
      }
      catch (Exception e)
      {
        Log.LogErrorFromException (e, true);
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override string GenerateCommandLineFromProps (ITaskItem source)
    {
      // 
      // Build a command-line based on parsing switches from the registered property sheet, and any additional flags.
      // 

      StringBuilder builder = new StringBuilder (PathUtils.CommandLineLength);

      try
      {
        if (source == null)
        {
          throw new ArgumentNullException ();
        }

        builder.Append ("--jdk-home " + PathUtils.QuoteIfNeeded (JavaHomeDir) + " ");

        builder.Append ("-verbose" + " ");

        builder.Append (m_parsedProperties.Parse (source));
      }
      catch (Exception e)
      {
        Log.LogErrorFromException (e, true);
      }

      return builder.ToString ();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    protected override string ToolName
    {
      get
      {
        return "JavaCompile";
      }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
