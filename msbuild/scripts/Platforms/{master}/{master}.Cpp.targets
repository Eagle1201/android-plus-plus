<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  *This file is automatically generated. Local changes risk being overwritten by the export process.*

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->

<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <Import Project="$(VCTargetsPath)\Microsoft.CppCommon.targets" />

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <UsingTask TaskName="GccCompile" AssemblyFile="$(ANDROID_PLUS_PLUS)\msbuild\bin\AndroidPlusPlus.MsBuild.CppTasks.dll" />

  <UsingTask TaskName="GccLink" AssemblyFile="$(ANDROID_PLUS_PLUS)\msbuild\bin\AndroidPlusPlus.MsBuild.CppTasks.dll" />

  <UsingTask TaskName="GccLib" AssemblyFile="$(ANDROID_PLUS_PLUS)\msbuild\bin\AndroidPlusPlus.MsBuild.CppTasks.dll" />

  <UsingTask TaskName="GccStrip" AssemblyFile="$(ANDROID_PLUS_PLUS)\msbuild\bin\AndroidPlusPlus.MsBuild.CppTasks.dll" />

  <UsingTask TaskName="GccBuildId" AssemblyFile="$(ANDROID_PLUS_PLUS)\msbuild\bin\AndroidPlusPlus.MsBuild.CppTasks.dll" />

  <UsingTask TaskName="VCMessage" AssemblyName="Microsoft.Build.CppTasks.Common, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <PropertyGroup>

    <!--
      Enable incremental build by enable file tracking in tasks.
    -->

    <TrackFileAccess Condition="'$(TrackFileAccess)' == ''">true</TrackFileAccess>

    <!--
      Adjust target path to incorporate target architecture. GetDirectoryName evaluates out the relative paths - mimicking $(TargetDir).
    -->

    <TargetPath>$([System.IO.Path]::GetDirectoryName('$([System.IO.Path]::Combine($(ProjectDir),$(OutDir)$(TargetPlatformArchitectureEabi)))'))\$(TargetName)$(TargetExt)</TargetPath>

  </PropertyGroup>

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <!-- 
    'ClCompile' based on: MSBuild\Microsoft.Cpp\v4.0\Microsoft.CppCommon.targets 
  -->
  
  <Target Name="ClCompile" Condition="'@(ClCompile)' != ''" DependsOnTargets="SelectClCompile">

    <ItemGroup>
      <ClCompile>
        <PrecompiledHeaderOutputFile Condition="'%(ClCompile.PrecompiledHeader)' == 'NotUsing' or '%(ClCompile.PrecompiledHeader)' == ''"></PrecompiledHeaderOutputFile>
        <PrecompiledHeaderFile Condition="'%(ClCompile.PrecompiledHeader)' == 'NotUsing' or '%(ClCompile.PrecompiledHeader)' == ''"></PrecompiledHeaderFile>

        <CompileAs Condition="('%(ClCompile.CompileAs)' == 'Default' and '%(ClCompile.Extension)' == '.c')">CompileAsC</CompileAs>
        <CompileAs Condition="('%(ClCompile.CompileAs)' == 'Default' and '%(ClCompile.Extension)' == '.s')">CompileAsAsm</CompileAs>
        <CompileAs Condition="('%(ClCompile.CompileAs)' == 'Default' and '%(ClCompile.Extension)' == '.asm')">CompileAsAsm</CompileAs>
        <CompileAs Condition="('%(ClCompile.CompileAs)' == 'Default' and ('%(ClCompile.Extension)' != '.c' and '%(ClCompile.Extension)' != '.s' and '%(ClCompile.Extension)' != '.asm'))">CompileAsCpp</CompileAs>

        <NoExecutableStack Condition="'%(ClCompile.CompileAs)' == 'CompileAsAsm'">true</NoExecutableStack>

        <MinimalRebuildFromTracking Condition="'%(ClCompile.MinimalRebuildFromTracking)' == '' and '$(BuildType)' == 'Build' and '$(ForceRebuild)' != 'true'">true</MinimalRebuildFromTracking>
      </ClCompile>
    </ItemGroup>

    <!-- 
      Process all the sources flagged for Pre-Compiled Header (PCH) generation first.
    -->

    <ItemGroup>
      <ClCompile>
        <ObjectFileName Condition="('%(ClCompile.PrecompiledHeader)' == 'Create' and '$(LlvmVersion)' == '')">%(ClCompile.PrecompiledHeaderInputFile).gch</ObjectFileName>
        <ObjectFileName Condition="('%(ClCompile.PrecompiledHeader)' == 'Create' and '$(LlvmVersion)' != '')">$(IntDir)%(ClCompile.PrecompiledHeaderOutputFile).pch</ObjectFileName>
        <CompileAs Condition="('%(ClCompile.PrecompiledHeader)' == 'Create' and '%(ClCompile.CompileAs)' == 'CompileAsC')">CompileAsCHeader</CompileAs>
        <CompileAs Condition="('%(ClCompile.PrecompiledHeader)' == 'Create' and '%(ClCompile.CompileAs)' != 'CompileAsC')">CompileAsCppHeader</CompileAs>
        <LinkCompiled Condition="'%(ClCompile.PrecompiledHeader)' == 'Create'">false</LinkCompiled>
      </ClCompile>
      
      <!-- GCC and Clang use slightly different methods of including PCHs. Clang also allows them to be placed in intermediate directories. -->
      <ClCompile>
        <ForcedIncludeFiles Condition="('%(ClCompile.PrecompiledHeader)' == 'Use' and '$(LlvmVersion)' == '')">%(ClCompile.PrecompiledHeaderFile);%(ForcedIncludeFiles)</ForcedIncludeFiles>
        <ForcedIncludeFiles Condition="('%(ClCompile.PrecompiledHeader)' == 'Use' and '$(LlvmVersion)' != '')">$(IntDir)%(ClCompile.PrecompiledHeaderOutputFile);%(ForcedIncludeFiles)</ForcedIncludeFiles>
      </ClCompile>
      
      <!-- Inline function limit specification is not supported by Clang. -->
      <ClCompile>
        <InlineLimitSize Condition="'$(LlvmVersion)' != ''"></InlineLimitSize>
      </ClCompile>
    </ItemGroup>

    <GccCompile
      Condition="'%(ClCompile.ExcludedFromBuild)'!='true' and '%(ClCompile.PrecompiledHeader)' == 'Create'"
      BuildingInIDE="$(BuildingInsideVisualStudio)"
      Sources="@(ClCompile)"

      ProcessorNumber="%(ClCompile.ProcessorNumber)"
      MultiProcessorCompilation="%(ClCompile.MultiProcessorCompilation)"

      TrackerLogDirectory="%(ClCompile.TrackerLogDirectory)"
      TLogReadFiles="@(CLTLogReadFiles)"
      TLogWriteFiles="@(CLTLogWriteFiles)"
      TrackFileAccess="$(TrackFileAccess)"
      MinimalRebuildFromTracking="%(ClCompile.MinimalRebuildFromTracking)"

      OutputCommandLine="%(ClCompile.OutputCommandLine)"
      ToolPath="$(PlatformToolsetCompileToolPath)"
      ToolExe="$(PlatformToolsetCompileTool)"
      PropertiesFile="$(VCTargetsPath)\Platforms\Android++\$(LangID)\gcc_compile.xml">

    </GccCompile>

    <!--
      Process the rest of the registered sources.
    -->

    <GccCompile
      Condition="'%(ClCompile.ExcludedFromBuild)'!='true' and '%(ClCompile.PrecompiledHeader)' != 'Create'"
      BuildingInIDE="$(BuildingInsideVisualStudio)"
      Sources="@(ClCompile)"

      ProcessorNumber="%(ClCompile.ProcessorNumber)"
      MultiProcessorCompilation="%(ClCompile.MultiProcessorCompilation)"

      TrackerLogDirectory="%(ClCompile.TrackerLogDirectory)"
      TLogReadFiles="@(CLTLogReadFiles)"
      TLogWriteFiles="@(CLTLogWriteFiles)"
      TrackFileAccess="$(TrackFileAccess)"
      MinimalRebuildFromTracking="%(ClCompile.MinimalRebuildFromTracking)"

      OutputCommandLine="%(ClCompile.OutputCommandLine)"
      ToolPath="$(PlatformToolsetCompileToolPath)"
      ToolExe="$(PlatformToolsetCompileTool)"
      PropertiesFile="$(VCTargetsPath)\Platforms\Android++\$(LangID)\gcc_compile.xml">

    </GccCompile>

  </Target>

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <!-- 
    'Link' based on: MSBuild\Microsoft.Cpp\v4.0\Microsoft.CppCommon.targets 
  -->

  <Target 
    Name="Link" 
    Condition="'@(Link)' != ''">

    <PropertyGroup>
      <Link_MinimalRebuildFromTracking Condition="'@(Link->AnyHaveMetadataValue('MinimalRebuildFromTracking', 'false'))' == 'true'">false</Link_MinimalRebuildFromTracking>
      <Link_MinimalRebuildFromTracking Condition="'$(BuildType)' != 'Build' or '$(ForceRebuild)' == 'true'" >false</Link_MinimalRebuildFromTracking>
      <Link_MinimalRebuildFromTracking Condition="'$(Link_MinimalRebuildFromTracking)' == ''">true</Link_MinimalRebuildFromTracking>
    </PropertyGroup>

    <ItemGroup>
      <Link>
        <!-- Enforce dead-code stripping on exported application shared libraries. -->
        <StripUnusedSymbols Condition="'$(ConfigurationType)' == 'Application'">true</StripUnusedSymbols>
      </Link>
    </ItemGroup>

    <GccLink
      BuildingInIDE="$(BuildingInsideVisualStudio)"
      Sources="@(Link)"

      TrackerLogDirectory="%(Link.TrackerLogDirectory)"
      TLogReadFiles="@(LinkTLogReadFiles)"
      TLogWriteFiles="@(LinkTLogWriteFiles)"
      TrackFileAccess="$(TrackFileAccess)"
      MinimalRebuildFromTracking="$(Link_MinimalRebuildFromTracking)"

      OutputCommandLine="%(Link.OutputCommandLine)"
      ToolPath="$(PlatformToolsetLinkToolPath)"
      ToolExe="$(PlatformToolsetLinkTool)"
      PropertiesFile="$(VCTargetsPath)\Platforms\Android++\$(LangID)\gcc_link.xml">

      <Output TaskParameter="OutputFiles" ItemName="LinkOutputFiles" />

      <Output TaskParameter="SkippedExecution" PropertyName="LinkSkippedExecution" />

    </GccLink>

    <Message Condition="'$(LinkSkippedExecution)' == 'false'" Text="$(MSBuildProjectFile) -&gt; @(LinkOutputFiles)" Importance="High" />

    <!--
      Separate debugging info/symbols from output library. Create a dedicated symbols file.
    -->

    <PropertyGroup>
      <_DebugLinkSharedLibrary>@(LinkOutputFiles->'%(RootDir)%(Directory)%(Filename)%(Extension)')</_DebugLinkSharedLibrary>
      <_DebugLinkSymbolsFile>@(LinkOutputFiles->'%(RootDir)%(Directory)%(Filename).debug')</_DebugLinkSymbolsFile>
    </PropertyGroup>

    <Exec Command="$(PlatformToolsetObjcopyToolPath)\$(PlatformToolsetObjcopyTool) --only-keep-debug $(_DebugLinkSharedLibrary) $(_DebugLinkSymbolsFile)" />

    <Message Condition="'$(LinkSkippedExecution)' == 'false'" Text="$(MSBuildProjectFile) -&gt; $(_DebugLinkSymbolsFile)" Importance="High" />

    <ItemGroup>
      <LinkOutputFiles>
        <StripUnusedSymbols>%(Link.StripUnusedSymbols)</StripUnusedSymbols>
        <StripDebugSymbols>%(Link.StripDebugSymbols)</StripDebugSymbols>
        <!-- Obviously I don't understand MSBuild, because referencing these props directly in GccStrip doesn't work. -->
        <TrackerLogDirectory>%(Link.TrackerLogDirectory)</TrackerLogDirectory>
        <MinimalRebuildFromTracking>%(Link.MinimalRebuildFromTracking)</MinimalRebuildFromTracking>
        <OutputCommandLine>%(Link.OutputCommandLine)</OutputCommandLine>
      </LinkOutputFiles>
    </ItemGroup>

    <GccStrip
      BuildingInIDE="$(BuildingInsideVisualStudio)"
      Sources="@(LinkOutputFiles)"
      Condition="('@(LinkOutputFiles)' != '' and ('%(StripUnusedSymbols)' == 'true' or '%(StripDebugSymbols)' == 'true'))"

      TrackerLogDirectory="%(LinkOutputFiles.TrackerLogDirectory)"
      TrackFileAccess="$(TrackFileAccess)"
      MinimalRebuildFromTracking="%(LinkOutputFiles.MinimalRebuildFromTracking)"

      OutputCommandLine="%(LinkOutputFiles.OutputCommandLine)"
      ToolPath="$(PlatformToolsetStripToolPath)"
      ToolExe="$(PlatformToolsetStripTool)"
      PropertiesFile="$(VCTargetsPath)\Platforms\Android++\$(LangID)\gcc_strip.xml"
    />

    <Exec Command="$(PlatformToolsetObjcopyToolPath)\$(PlatformToolsetObjcopyTool) --add-gnu-debuglink=$(_DebugLinkSymbolsFile) $(_DebugLinkSharedLibrary)" />

    <!--
      Evaluate library build-id and place debugging symbols under .\.build-id\[ab]\[cdefghijklmnopqrstuvwxyz].debug so GDB can find this via 'debug-files-directory'
      - More info: https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html
    -->

    <GccBuildId
      TargetElf="$(_DebugLinkSharedLibrary)"
      OutputCommandLine="%(LinkOutputFiles.OutputCommandLine)"
      ToolPath="$(PlatformToolsetReadElfToolPath)"
      ToolExe="$(PlatformToolsetReadElfTool)">
      <Output TaskParameter="BuildId" PropertyName="_DebugLinkSharedLibaryBuildId" />
    </GccBuildId>

    <PropertyGroup>
      <_DebugLinkBuildIdPath>$([System.IO.Path]::GetDirectoryName('$(_DebugLinkSharedLibrary)'))\.build-id\$(_DebugLinkSharedLibaryBuildId.Substring(0,2))</_DebugLinkBuildIdPath>
      <_DebugLinkBuildIdFilename>$(_DebugLinkSharedLibaryBuildId.Substring(2)).debug</_DebugLinkBuildIdFilename>
    </PropertyGroup>

    <Copy SourceFiles="$(_DebugLinkSymbolsFile)" DestinationFiles="$(_DebugLinkBuildIdPath)\$(_DebugLinkBuildIdFilename)" />

    <WriteLinesToFile
      File="$(_DebugLinkBuildIdPath)\$(_DebugLinkBuildIdFilename).txt"
      Lines="Debugging symbols for library: $(_DebugLinkSharedLibrary);Original file: $(_DebugLinkSymbolsFile);Build-id: $(_DebugLinkSharedLibaryBuildId);"
      Overwrite="true"
    />

    <!--
      Construct a GDB setup execution script, then embed this as an additional section ('gdb.setup') in the target library.
    -->

    <ItemGroup>
      <_GdbSearchDirectories Include="$(OutDir);$(LibraryPath)" />
      <_GdbDebugFileDirectories Include="$([System.IO.Path]::GetDirectoryName('$(_DebugLinkSharedLibrary)'))" />
    </ItemGroup>

    <PropertyGroup>
      <Semicolon>%3B</Semicolon>
      <GdbSetupExecutionScript>$(IntDir)gdb.setup</GdbSetupExecutionScript>
      <GdbSearchDirectories>@(_GdbSearchDirectories->'%(FullPath)', '$(Semicolon)')</GdbSearchDirectories>
      <GdbDebugFileDirectories>@(_GdbDebugFileDirectories->'%(FullPath)', '$(Semicolon)')</GdbDebugFileDirectories>
    </PropertyGroup>

    <WriteLinesToFile
      File="$(GdbSetupExecutionScript)"
      Lines="
        directory $(GdbSearchDirectories);
        set debug-file-directory $(GdbDebugFileDirectories);"
      Overwrite="true"
    />

    <Exec Command="$(PlatformToolsetObjcopyToolPath)\$(PlatformToolsetObjcopyTool) --add-section gdb.setup=$(GdbSetupExecutionScript) @(LinkOutputFiles->Metadata('FullPath'))" />

  </Target>

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <!-- 
    'Lib' based on: MSBuild\Microsoft.Cpp\v4.0\Microsoft.CppCommon.targets 
  -->

  <Target 
    Name="Lib" 
    Condition="'@(Lib)' != ''">

    <ItemGroup>
      <Lib>
        <MinimalRebuildFromTracking Condition="'%(Lib.MinimalRebuildFromTracking)' == '' and '$(BuildType)' == 'Build' and '$(ForceRebuild)' != 'true'">true</MinimalRebuildFromTracking>
      </Lib>
    </ItemGroup>

    <GccLib
      BuildingInIDE="$(BuildingInsideVisualStudio)"
      Sources="@(Lib)"

      TrackerLogDirectory="%(Lib.TrackerLogDirectory)"
      TLogReadFiles="@(LIBTLogReadFiles)"
      TLogWriteFiles="@(LIBTLogWriteFiles)"
      TrackFileAccess="$(TrackFileAccess)"
      MinimalRebuildFromTracking="%(Lib.MinimalRebuildFromTracking)"

      OutputCommandLine="%(Lib.OutputCommandLine)"
      ToolPath="$(PlatformToolsetLibToolPath)"
      ToolExe="$(PlatformToolsetLibTool)"
      PropertiesFile="$(VCTargetsPath)\Platforms\Android++\$(LangID)\gcc_lib.xml">

      <Output TaskParameter="OutputFiles" ItemName="LibOutputFiles" />

      <Output TaskParameter="SkippedExecution" PropertyName="LibSkippedExecution" />

    </GccLib>

    <!--
      Strip unused and debugging symbols, when requested.
    -->

    <ItemGroup>
      <LibOutputFiles>
        <StripUnusedSymbols>%(Lib.StripUnusedSymbols)</StripUnusedSymbols>
        <StripDebugSymbols>%(Lib.StripDebugSymbols)</StripDebugSymbols>
        <!-- Obviously I don't understand MSBuild, because referencing these props directly in GccStrip doesn't work. -->
        <TrackerLogDirectory>%(Lib.TrackerLogDirectory)</TrackerLogDirectory>
        <MinimalRebuildFromTracking>%(Lib.MinimalRebuildFromTracking)</MinimalRebuildFromTracking>
        <OutputCommandLine>%(Lib.OutputCommandLine)</OutputCommandLine>
      </LibOutputFiles>
    </ItemGroup>
    
    <Copy 
      Condition="('@(LibOutputFiles)' != '' and ('%(StripUnusedSymbols)' == 'true' or '%(StripDebugSymbols)' == 'true'))"
      SourceFiles="@(LibOutputFiles)" 
      DestinationFiles="$(OutDir)$(TargetName)$(TargetExt).unstripped" 
    />

    <GccStrip
      BuildingInIDE="$(BuildingInsideVisualStudio)"
      Sources="@(LibOutputFiles)"
      Condition="('@(LibOutputFiles)' != '' and ('%(StripUnusedSymbols)' == 'true' or '%(StripDebugSymbols)' == 'true'))"

      TrackerLogDirectory="%(LibOutputFiles.TrackerLogDirectory)"
      TrackFileAccess="$(TrackFileAccess)"
      MinimalRebuildFromTracking="%(LibOutputFiles.MinimalRebuildFromTracking)"

      OutputCommandLine="%(LibOutputFiles.OutputCommandLine)"
      ToolPath="$(PlatformToolsetStripToolPath)"
      ToolExe="$(PlatformToolsetStripTool)"
      PropertiesFile="$(VCTargetsPath)\Platforms\Android++\$(LangID)\gcc_strip.xml"
    />

    <Message Condition="'$(LibSkippedExecution)' == 'false'" Text="$(MSBuildProjectFile) -&gt; @(LibOutputFiles)" Importance="High" />

  </Target> 

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

  <Import Project="$(VCTargetsPath)\Platforms\Android++\Android++.CppBuild.targets" />

  <Import Project="$(VCTargetsPath)\Platforms\Android++\Android++.CppStubs.targets" />

  <!--
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->

</Project>

<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
