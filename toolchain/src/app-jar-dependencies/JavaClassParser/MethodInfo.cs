////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Text;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace app_jar_dependencies.JavaClassParser
{

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public class MethodInfo
  {
    public ushort access_flags;

    public ushort name_index;

    public ushort description_index;

    public ushort attributes_count;

    public AttributeInfo [] attributes;

    public MethodInfo ()
    {
    }

    public void Parse (ref BinaryReader reader)
    {
      access_flags = EndianSwap.SwapUInt16 (reader.ReadUInt16 ());

      name_index = EndianSwap.SwapUInt16 (reader.ReadUInt16 ());

      description_index = EndianSwap.SwapUInt16 (reader.ReadUInt16 ());

      attributes_count = EndianSwap.SwapUInt16 (reader.ReadUInt16 ());

      attributes = new AttributeInfo [attributes_count];

      for (int i = 0; i < attributes_count; ++i)
      {
        attributes [i] = new AttributeInfo ();

        attributes [i].Parse (ref reader);
      }
    }
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
